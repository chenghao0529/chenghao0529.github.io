<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>咕泡云商城-第二章商品模块</title>
      <link href="/2023/01/13/%E5%92%95%E6%B3%A1%E4%BA%91%E5%95%86%E5%9F%8E-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/"/>
      <url>/2023/01/13/%E5%92%95%E6%B3%A1%E4%BA%91%E5%95%86%E5%9F%8E-%E7%AC%AC%E4%BA%8C%E7%AB%A0%E5%9F%BA%E7%A1%80%E6%A8%A1%E5%9D%97%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="咕泡云商城-第二章商品模块"><a href="#咕泡云商城-第二章商品模块" class="headerlink" title="咕泡云商城-第二章商品模块"></a>咕泡云商城-第二章商品模块</h1><h3 id="商品微服务-品牌模块"><a href="#商品微服务-品牌模块" class="headerlink" title="商品微服务-品牌模块"></a>商品微服务-品牌模块</h3><h4 id="表结构和数据准备"><a href="#表结构和数据准备" class="headerlink" title="表结构和数据准备"></a>表结构和数据准备</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for brand</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `brand`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `brand` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;品牌id&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;品牌名称&#x27;</span>,</span><br><span class="line">  `image` <span class="type">varchar</span>(<span class="number">1000</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;品牌图片地址&#x27;</span>,</span><br><span class="line">  `<span class="keyword">initial</span>` <span class="type">varchar</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;品牌的首字母&#x27;</span>,</span><br><span class="line">  `sort` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;排序&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">14</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;品牌表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of brand</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;https://sklll.oss-cn-beijing.aliyuncs.com/secby/eed72cc4-a9c1-4010-949a-03cef5b933d6.jpg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` <span class="keyword">VALUES</span> (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;中兴&#x27;</span>, <span class="string">&#x27;https://sklll.oss-cn-beijing.aliyuncs.com/secby/4fedb361-5ab3-4ad0-a667-580c1f37dff0.jpg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `brand` <span class="keyword">VALUES</span> (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;大疆&#x27;</span>, <span class="string">&#x27;https://sklll.oss-cn-beijing.aliyuncs.com/secby/e8382c48-0487-4a9b-8fd0-a3716c3eea19.jpg&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="项目整合mybatis-plus"><a href="#项目整合mybatis-plus" class="headerlink" title="项目整合mybatis-plus"></a>项目整合mybatis-plus</h4><h5 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h5><p>在微服务公共依赖工程 <code>mall-service-dependency</code>中引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis Plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>mall-api</code>中引入如下依赖(<strong>编写JavaBean会用到MyBatis Plus的相关注解，引入依赖防止程序编译不通过</strong>)：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--MyBatis Plus--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="在-mall-api创建-goods-api工程-用于创建-shop数据库表对应的实体Bean和Feign接口。"><a href="#在-mall-api创建-goods-api工程-用于创建-shop数据库表对应的实体Bean和Feign接口。" class="headerlink" title="在 mall-api创建 goods-api工程,用于创建 shop数据库表对应的实体Bean和Feign接口。"></a>在 <code>mall-api</code>创建 <code>goods-api</code>工程,用于创建 <code>shop</code>数据库表对应的实体Bean和Feign接口。</h5><p>创建brand实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandEntity</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@TableId(type= IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌图片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String image;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 品牌首字母</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">    <span class="keyword">private</span> String initial;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  品牌排序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="在-mall-service中创建-goods-service微服务，用于操作-shop数据库。"><a href="#在-mall-service中创建-goods-service微服务，用于操作-shop数据库。" class="headerlink" title="在 mall-service中创建 goods-service微服务，用于操作 shop数据库。"></a>在 <code>mall-service</code>中创建 <code>goods-service</code>微服务，用于操作 <code>shop</code>数据库。</h5><ol><li>pom.xml代码如下：</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>goods-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>goods-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>构建bootstrap.yml文件</li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">#服务名称</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">mall-goods</span></span><br><span class="line">  <span class="comment">#数据库</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://101.34.5.93:3306/shop?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">654321</span></span><br><span class="line">  <span class="comment"># nacos 注册地址</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">server-addr:</span> <span class="number">101.34</span><span class="number">.5</span><span class="number">.93</span><span class="string">:8848</span></span><br><span class="line">    </span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#复杂的操作可能需要自己写SQL，SQL可以写到xml文件中，这里指定和Dao对应的xml文件，此时我们需要在resources中创建一个mapper目录。</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 指定JavaBean的别名包，和MyBatis用法一样</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.chenghao.work.mall.*.model</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰功能，数据库表列名如果有_，可以自动按驼峰命名规则转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#日志开启，方便测试</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">pattern:</span></span><br><span class="line">    <span class="attr">console:</span> <span class="string">&quot;%msg%n&quot;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>构建启动类 <code>GoodsServiceApplication</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.chenghao.work.mall.goods.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GoodsServiceApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(GoodsServiceApplication.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动后，观察nacos，发现成功注册上去了</li></ol><p><img src="/images/ysc-nacos-goods.png"></p><ol start="5"><li><p>根据mybatis-plus编写mapper，service，serviceImpl，利用postman进行controller层测试</p><p>MyBatisPlus提供了很多通用方法：</p></li></ol><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mapper(接口)-&gt;extends</span> <span class="string">BaseMapper【增删改查】</span></span><br><span class="line"><span class="attr">service(接口)-&gt;extends</span> <span class="string">IService【增删改查】</span></span><br><span class="line"><span class="attr">serviceImpl-&gt;extends</span> <span class="string">ServiceImpl【增删改查】</span></span><br></pre></td></tr></table></figure><p> Mapper创建,创建品牌的mapper继承BaseMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: BrandMapper</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;BrandEntity&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Service创建，创建品牌的service继承IService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: BrandService</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IBrandService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;BrandEntity&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPage 当前页面</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size 页面大小</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> brand 品牌实体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 品牌分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Page&lt;BrandEntity&gt; <span class="title function_">queryPageList</span><span class="params">(Long currentPage, Long size, BrandEntity brand)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ServiceImpl创建，创建品牌的serviceImpl继承ServiceImpl，实现IBrandService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: BrandServiceImpl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;BrandMapper, BrandEntity&gt; <span class="keyword">implements</span> <span class="title class_">IBrandService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> BrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;BrandEntity&gt; <span class="title function_">queryPageList</span><span class="params">(Long currentPage, Long size, BrandEntity brand)</span> &#123;</span><br><span class="line">        QueryWrapper&lt;BrandEntity&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(brand.getName()))&#123;</span><br><span class="line">            queryWrapper.like(<span class="string">&quot;name&quot;</span>,brand.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectPage(<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(currentPage,size),queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Controller层,增删改方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@name</span>: BrandController</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2023/1/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;brand&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BrandController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> IBrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 增加品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> RespResult <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> BrandEntity brand)</span>&#123;</span><br><span class="line">        <span class="comment">// 增加品牌</span></span><br><span class="line">        brandService.save(brand);</span><br><span class="line">        <span class="keyword">return</span> RespResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> RespResult <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> BrandEntity brand)</span>&#123;</span><br><span class="line">        <span class="comment">//修改品牌</span></span><br><span class="line">        brandService.updateById(brand);</span><br><span class="line">        <span class="keyword">return</span> RespResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 删除品牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RespResult <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable(value = &quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class="line">        <span class="comment">//删除品牌</span></span><br><span class="line">        brandService.removeById(id);</span><br><span class="line">        <span class="keyword">return</span> RespResult.ok();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">/****</span></span><br><span class="line"><span class="comment">     * 条件分页查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/list/&#123;page&#125;/&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RespResult&lt;Page&lt;BrandEntity&gt;&gt; <span class="title function_">list</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(value = &quot;page&quot;)</span>Long currentPage,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable(value = &quot;size&quot;)</span>Long size,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestBody(required = false)</span> BrandEntity brand)</span>&#123;</span><br><span class="line">        <span class="comment">// 分页查询</span></span><br><span class="line">        Page&lt;BrandEntity&gt; brandPage = brandService.queryPageList(currentPage,size,brand);</span><br><span class="line">        <span class="keyword">return</span> RespResult.ok(brandPage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用http.client进行测试，在项目的resources目录新建http目录，新建brand.http文件,这样有助与别人维护的时候直接进行测试,也不需要进行postman切换。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">### 品牌新增操作</span><br><span class="line">POST http://localhost:8081/brand</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;:&quot;小米&quot;,</span><br><span class="line">  &quot;image&quot;: &quot;https://image.baidu.com/search&quot;,</span><br><span class="line">  &quot;initial&quot;: &quot;&quot;,</span><br><span class="line">  &quot;sort&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 品牌编辑操作</span><br><span class="line">PUT http://localhost:8081/brand</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;id&quot;: 15,</span><br><span class="line">&quot;name&quot;:&quot;小米2&quot;,</span><br><span class="line">&quot;image&quot;: &quot;https://image.baidu.com/search&quot;,</span><br><span class="line">&quot;initial&quot;: &quot;&quot;,</span><br><span class="line">&quot;sort&quot;: 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 品牌删除操作</span><br><span class="line">DELETE http://localhost:8081/brand/14</span><br><span class="line"></span><br><span class="line">### 品牌分页查询操作</span><br><span class="line">POST http://localhost:8081/brand/list/1/10</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;小&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码均已经上传，可点击博客首页github按钮进行跳转，仓库为<a href="https://github.com/chenghao0529/chenghaoshop">chenghaoshop</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>咕泡云商城项目-第一章项目搭建</title>
      <link href="/2023/01/12/%E5%92%95%E6%B3%A1%E4%BA%91%E5%95%86%E5%9F%8E-%E7%AC%AC%E4%B8%80%E7%AB%A0%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2023/01/12/%E5%92%95%E6%B3%A1%E4%BA%91%E5%95%86%E5%9F%8E-%E7%AC%AC%E4%B8%80%E7%AB%A0%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="咕泡云商城-第一章项目搭建"><a href="#咕泡云商城-第一章项目搭建" class="headerlink" title="咕泡云商城-第一章项目搭建"></a>咕泡云商城-第一章项目搭建</h1><h3 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h3><p>咕泡云商城是基于SpringCloud Alibaba技术栈研发的B2C电商平台，平台拥有核心的电商业务功能。运营商在后台管理商品，前台能通过搜索引擎实时搜索到最新商品，用户注册后可以直接在平台购买商品，并通过微信支付实现线上支付。用户还能参与平台秒杀抢购，并实现线上支付秒杀商品</p><hr><h3 id="云商城架构设计"><a href="#云商城架构设计" class="headerlink" title="云商城架构设计"></a>云商城架构设计</h3><h3 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h3><p>架构设计如下图，将在后面的章节分别介绍。</p><p><img src="/images/ysc-jiagoutu.png"></p><hr><h3 id="工程搭建"><a href="#工程搭建" class="headerlink" title="工程搭建"></a>工程搭建</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><p>这里需要用到数据库 <code>MySQL</code>和注册中心 <code>Nacos</code>，数据库和注册中心我全部装到腾讯云服务器，用docker部署</p><ol><li>安装mysql,注意需要倒对应的服务器运营商管理界面的防火墙中，放开3306端口，否则可能连不上</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -di --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xxxxxxxx mysql:5.7</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装nacos,同样需要放开8848端口,<a href="http://101.34.5.93:8848/nacos/#/login,%E8%B4%A6%E5%8F%B7%E5%AF%86%E7%A0%81%E9%83%BD%E6%98%AFnacos">http://101.34.5.93:8848/nacos/#/login,账号密码都是nacos</a></li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d -p 8848:8848 -e MODE=standalone -v /opt/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties -v /opt/nacos/logs:/home/nacos/logs --restart always --name nacos nacos/nacos-server</span></span><br></pre></td></tr></table></figure><p><img src="/images/ysc-fanghuoqiang.png"></p><h4 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h4><h4 id="工程结构"><a href="#工程结构" class="headerlink" title="工程结构"></a>工程结构</h4><p>我们可以按照功能分类，给每类工程创建一个父工程，所有的父工程都是一个pom项目，方便管理。</p><p>最外层在建一个统一的父工程做jar包，子工程管理。此处依然是pom项目，管理所有工程都需要的jar包，比如lombok所有的模块都可能是要使用日志，还有测试模块。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mall-api：存储所有数据库表对应的Bean和Feign接口</span></span><br><span class="line"><span class="attr">mall-gateway：存储所有微服务网关</span></span><br><span class="line"><span class="attr">mall-service：存储所有微服务工程</span></span><br><span class="line"><span class="attr">mall-util：存储公共工程</span></span><br><span class="line"><span class="attr">mall-web：存储所有和页面渲染有关的工程</span></span><br></pre></td></tr></table></figure><p><img src="/images/ysc-xiangmujiegoutu.png"></p><h4 id="构建顶级父类工"><a href="#构建顶级父类工" class="headerlink" title="构建顶级父类工"></a>构建顶级父类工</h4><p>构建顶级工程，作为pom项目，pom文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>咕泡云商城项目<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 各个工程get，set，构造方法的创建以及日志操作 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 各工程测试 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="构建各模块的父工程"><a href="#构建各模块的父工程" class="headerlink" title="构建各模块的父工程"></a>构建各模块的父工程</h4><ol><li>mall-api：存储所有数据库表对应的Bean和Feign接口</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        所有数据库表对应的Bean和Feign接口</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>mall-service：存储所有微服务工程</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        所有微服务工程的父工程</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>mall-util：存储公共工程</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        所有工具类的父工程</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>mall-web：存储所有和页面渲染有关的工程</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>所有涉及页面渲染的父工程<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>mall-gateway：存储所有微服务网关</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">        微服务网关父工程</span><br><span class="line">    <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="公共工程的搭建-mall-util中"><a href="#公共工程的搭建-mall-util中" class="headerlink" title="公共工程的搭建 mall-util中"></a>公共工程的搭建 mall-util中</h3><h4 id="1-公共依赖包"><a href="#1-公共依赖包" class="headerlink" title="1. 公共依赖包"></a>1. 公共依赖包</h4><p>service中以后要进行所有微服务工程的数据库操作，可以把所有service需要用到的包以及所有service需要初始化的对象放到一个独立的工程中，以后哪个工程要用，直接依赖即可。</p><p>在 <code>mall-util</code>中创建 <code>mall-service-dependency</code>，pom.xml依赖如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chenghaoshop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chenghao.work<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>&gt;</span>../../pom.xml<span class="tag">&lt;/<span class="name">relativePath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mall-service-dependency<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>所有微服务工程共同的依赖包<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MyBatis Plus--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MySQL--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Redis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Nacos--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-公共工具包"><a href="#2-公共工具包" class="headerlink" title="2.公共工具包"></a>2.公共工具包</h4><p>我们需要用到的工具包也可以单独放到一个工程中，每次要用，直接依赖即可。比如code，result，pageInfo</p><p>在 <code>mall-util</code>中创建 <code>mall-common</code></p><p>定义项目错误码-部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RespCode</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="number">20000</span>, <span class="string">&quot;操作成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 操作失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ERROR(<span class="number">50000</span>, <span class="string">&quot;操作失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 系统错误</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SYSTEM_ERROR(<span class="number">50001</span>, <span class="string">&quot;系统错误&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>定义返回结果-部分代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RespResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 响应数据结果集</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     * 20000 操作成功</span></span><br><span class="line"><span class="comment">     * 50000 操作失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***S</span></span><br><span class="line"><span class="comment">     * 响应信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 项目实战 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OOM内存溢出分析</title>
      <link href="/2023/01/11/oom%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/"/>
      <url>/2023/01/11/oom%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="OOM内存溢出分析"><a href="#OOM内存溢出分析" class="headerlink" title="OOM内存溢出分析"></a>OOM内存溢出分析</h1><h3 id="概念与背景"><a href="#概念与背景" class="headerlink" title="概念与背景"></a>概念与背景</h3><p><a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA&spm=1001.2101.3001.7020">内存溢出</a>(Out Of Memory，简称OOM)是指应用系统中存在无法回收的内存或使用的内存过多，最终使得程序运行要用到的内存大于能提供的最大内存。</p><p>通常面试过程中，经常会有面试官问如果生产出现oom问题，你要怎么解决，处理步骤见下面</p><hr><h3 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h3><h4 id="1-内存泄漏"><a href="#1-内存泄漏" class="headerlink" title="1. 内存泄漏"></a><strong>1. 内存泄漏</strong></h4><p>由于长期保持某些资源的引用，垃圾回收器无法回收它，从而使该资源不能够及时释放，也称为内存泄露。因而尽量不要将所有引用都使用为强引用，可以在合适的地方使用弱引用和软引用。后期讲分析threadlocal的不正确使用导致的内存泄漏问题。</p><h4 id="2-超大对象"><a href="#2-超大对象" class="headerlink" title="2. 超大对象"></a>2. <strong>超大对象</strong></h4><p>保存多个耗用内存过大或当加载单个超大的对象时，该对象的大小超过了当前剩余的可用内存空间。比如查询数据库中的数据，一次查询过多，直接导致内存溢出了。因此查询数据库如果数据过多尽量使用分页查询</p><h4 id="3-死循环无法清除的对象"><a href="#3-死循环无法清除的对象" class="headerlink" title="3. 死循环无法清除的对象"></a>3. 死循环无法清除的对象</h4><p>存在死循环重复产生对象，且集合对象使用完之后依然被引用着，导致无法清除导致占用空间过大等。本文演示此条</p><hr><h3 id="演示OOM异常"><a href="#演示OOM异常" class="headerlink" title="演示OOM异常"></a>演示OOM异常</h3><p>模拟死循环无法清除的对象导致的oom现象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OomTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 记录多少次发生oom错误</span></span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">atomicInteger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line">        List&lt;Content&gt; contentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 持续放content对象，知道把内存撑爆</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="type">Content</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Content</span>();</span><br><span class="line">            contentList.add(content);</span><br><span class="line">            System.out.println(atomicInteger.incrementAndGet());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Content</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟一个1m的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>项目启动时，我们可以添加启动参数，去自动dump出发生异常的内存文件，实际公司中一般发生oom异常，也会由运维同事把当时的dump文件发给你。为加快oom现象的产生，我们调整一下jvm的堆大小为16M。</p><p>添加启动参数</p><p>-Xms16m -Xmx16m -XX:+HeapDumpOnOutOfMemoryError</p><p><img src="/images/oomTest-canshu.png"></p><p>点击运行的到报错日志</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line">java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">Dumping heap to java_pid1221.hprof ...</span><br><span class="line">Heap dump file created [<span class="number">14739116</span> bytes in <span class="number">0.018</span> secs]</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.OutOfMemoryError: Java heap space</span><br><span class="line">at com.chenghao.work.oom.Content.&lt;init&gt;(OomTest.java:<span class="number">32</span>)</span><br><span class="line">at com.chenghao.work.oom.OomTest.main(OomTest.java:<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">1</span></span><br></pre></td></tr></table></figure><p>可以发现生成了java_pid1221.hprof文件，生产找运维要即可。</p><hr><h3 id="利用JProfile分析"><a href="#利用JProfile分析" class="headerlink" title="利用JProfile分析"></a>利用JProfile分析</h3><p>利用jprofile工具打开java_pid1221.hprof，在当前对象集的最大对象可以发现这个ArrayList对象占了百分之96</p><p><img src="/images/oomTest-bigObject.png"></p><p>在图表中可以看到有问题的代码行数和对象调用情况。然后回到代码解决问题</p><p><img src="/images/oomTest-table.png"></p>]]></content>
      
      
      <categories>
          
          <category> jvm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>optional入门</title>
      <link href="/2023/01/10/optional%E7%94%A8%E6%B3%95/"/>
      <url>/2023/01/10/optional%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="optional使用"><a href="#optional使用" class="headerlink" title="optional使用"></a>optional使用</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Optional类是Java8为了解决null值判断问题而引入的，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）</p><hr><h3 id="常用api"><a href="#常用api" class="headerlink" title="常用api"></a>常用api</h3><h4 id="构建optional相关"><a href="#构建optional相关" class="headerlink" title="构建optional相关"></a>构建optional相关</h4><ol><li><p>创建一个包装对象值为空的Optional对象,很少用</p><p>　Optional optional = Optional.empty();</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line">  * Common instance for &#123;@code empty()&#125;.</span><br><span class="line">  */</span><br><span class="line">private static final Optional&lt;?&gt; EMPTY = new Optional&lt;&gt;();</span><br><span class="line"></span><br><span class="line">public static&lt;T&gt; Optional&lt;T&gt; empty() &#123;</span><br><span class="line">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">    Optional&lt;T&gt; t = (Optional&lt;T&gt;) EMPTY;</span><br><span class="line">    return t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建包装对象值非空的Optional对象，传入的value必须为非空，有校验空则报空指针异常</p><p>Optional optional = Optional.of(“optional”);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private Optional(T value) &#123;</span><br><span class="line">    this.value = Objects.requireNonNull(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static &lt;T&gt; Optional&lt;T&gt; of(T value) &#123;</span><br><span class="line">        return new Optional&lt;&gt;(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建包装对象值允许为空的Optional对象，最常用</p><p>Optional optional = Optional.ofNullable(null);</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public static &lt;T&gt; Optional&lt;T&gt; ofNullable(T value) &#123;</span><br><span class="line">    return value == null ? empty() : of(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><ol><li><p><strong>get方法</strong></p><p>get方法主要用于返回包装对象的实际值，但是如果包装对象值为null，会抛出<a href="https://so.csdn.net/so/search?q=NoSuchElementException&spm=1001.2101.3001.7020">NoSuchElementException</a>异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>(<span class="string">&quot;No value present&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>orElse方法</strong></p><p>orElse方法功能比较简单，即如果包装对象值非空，返回包装对象值，否则返回入参other的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElse</span><span class="params">(T other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>orElseGet方法</strong></p><p>orElseGet方法与orElse()方法类似，区别在于orElseGet()方法的入参为一个Supplier对象，用Supplier对象的get()方法的返回值作为默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">orElseGet</span><span class="params">(Supplier&lt;? extends T&gt; other)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span> ? value : other.get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>orElseThrow方法</strong></p><p>orElseThrow方法其实与orElseGet()方法非常相似，入参都是Supplier对象，但orElseThrow()的Supplier对象必须返回一个Throwable异常，并在orElseThrow()中将异常抛出，适用于包装对象值为空时需要抛出特定异常的场景。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;X <span class="keyword">extends</span> <span class="title class_">Throwable</span>&gt; T <span class="title function_">orElseThrow</span><span class="params">(Supplier&lt;? extends X&gt; exceptionSupplier)</span> <span class="keyword">throws</span> X &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> exceptionSupplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="处理"><a href="#处理" class="headerlink" title="处理"></a>处理</h3><ol><li><p><strong>ifPresent方法</strong></p><p>ifPresent方法接受一个Consumer对象（消费函数），如果包装对象的值非空，运行Consumer对象的accept()方法。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ifPresent</span><span class="params">(Consumer&lt;? <span class="built_in">super</span> T&gt; consumer)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value != <span class="literal">null</span>)</span><br><span class="line">        consumer.accept(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>isPresent方法</strong></p><p>isPresent方法用于判断包装对象的值是否非空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPresent</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value != <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>map方法</strong></p><p>map方法的参数为Function（函数式接口）对象，map()方法将Optional中的包装对象用Function函数进行运算，并包装成新的Optional对象（包装对象的类型可能改变）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>&lt;U&gt; Optional&lt;U&gt; <span class="title function_">map</span><span class="params">(Function&lt;? <span class="built_in">super</span> T, ? extends U&gt; mapper)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(mapper);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> empty();</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(mapper.apply(value));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>filter方法</strong></p><p>filter方法接受参数为Predicate对象，用于对Optional对象进行过滤，如果符合Predicate的条件，返回Optional对象本身，否则返回一个空的Optional对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Optional&lt;T&gt; <span class="title function_">filter</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> T&gt; predicate)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(predicate);</span><br><span class="line">    <span class="keyword">if</span> (!isPresent())</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> predicate.test(value) ? <span class="built_in">this</span> : empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="综合应用实战篇"><a href="#综合应用实战篇" class="headerlink" title="综合应用实战篇"></a>综合应用实战篇</h3><h4 id="基础类"><a href="#基础类" class="headerlink" title="基础类"></a>基础类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 城市名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String cityName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OptionalTest</span> &#123;</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//模拟调用外部方法，获取person对象，可能为空值 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Person <span class="title function_">buildPerson</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">Random</span>().nextBoolean()) &#123;</span><br><span class="line">            <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">            person.setAge(<span class="number">18</span>);</span><br><span class="line">            person.setName(<span class="string">&quot;chenghao&quot;</span>);</span><br><span class="line">            <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line">            address.setCityName(<span class="string">&quot;shanghai&quot;</span>);</span><br><span class="line">            person.setAddress(address);</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h5 id="1-取个人所在城市不为空的进行输出"><a href="#1-取个人所在城市不为空的进行输出" class="headerlink" title="1 取个人所在城市不为空的进行输出"></a>1 取个人所在城市不为空的进行输出</h5><p>传统方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCityName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> buildPerson();</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(person))&#123;</span><br><span class="line">            <span class="type">Address</span> <span class="variable">address</span> <span class="operator">=</span> person.getAddress();</span><br><span class="line">            <span class="keyword">if</span> (Objects.nonNull(address))&#123;</span><br><span class="line">                <span class="keyword">return</span> address.getCityName();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用optional改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getCityName2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> buildPerson();</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(person)</span><br><span class="line">                .map(Person::getAddress)</span><br><span class="line">                .map(Address::getCityName)</span><br><span class="line">                .orElse(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="2-获取固定名称的人-person由外部调用产生，可能为空"><a href="#2-获取固定名称的人-person由外部调用产生，可能为空" class="headerlink" title="2 获取固定名称的人,person由外部调用产生，可能为空"></a>2 获取固定名称的人,person由外部调用产生，可能为空</h5><p>传统方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Person <span class="title function_">getPerson</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(person) &amp;&amp; <span class="string">&quot;chenghao&quot;</span>.equals(person.getName()))&#123;</span><br><span class="line">            <span class="keyword">return</span> person;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">newPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        newPerson.setName(<span class="string">&quot;chenghao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> newPerson;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>使用optional改造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Person <span class="title function_">getPerson2</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> Optional.ofNullable(person).filter(p -&gt; <span class="string">&quot;chenghao&quot;</span>.equals(p.getName()))</span><br><span class="line">               .orElseGet(() -&gt; &#123;</span><br><span class="line">                   <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">                   person1.setName(<span class="string">&quot;chenghao&quot;</span>);</span><br><span class="line">                   <span class="keyword">return</span> person1;</span><br><span class="line">               &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合Rabbitmq</title>
      <link href="/2022/12/23/Sringboot%E6%95%B4%E5%90%88Rabbitmq/"/>
      <url>/2022/12/23/Sringboot%E6%95%B4%E5%90%88Rabbitmq/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot整合Rabbitmq"><a href="#Springboot整合Rabbitmq" class="headerlink" title="Springboot整合Rabbitmq"></a>Springboot整合Rabbitmq</h1><h3 id="生产者"><a href="#生产者" class="headerlink" title="生产者"></a>生产者</h3><p>  首先在pom文件中导入启动器：spring-boot-starter-amqp</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p> 编写配置文件 application.properties</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//生产者和消费者都必须配置的基本连接信息</span></span><br><span class="line"><span class="string">spring.rabbitmq.host=www.chenghao.work</span></span><br><span class="line"><span class="string">spring.rabbitmq.username=test</span></span><br><span class="line"><span class="string">spring.rabbitmq.password=test</span></span><br><span class="line"><span class="string">spring.rabbitmq.virtual-host=/test</span></span><br><span class="line"><span class="string">spring.rabbitmq.connection-timeout=3000ms</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#producer特有，消费者中不添加</span></span><br><span class="line"><span class="comment">#confirmlistener  mq接收到消息，会进行回调</span></span><br><span class="line"><span class="string">spring.rabbitmq.publisher-confirms=true</span></span><br><span class="line"><span class="comment">#returnlistener   如果没有任何队列接收到消息，会退回</span></span><br><span class="line"><span class="string">spring.rabbitmq.publisher-returns=true</span></span><br><span class="line"><span class="comment"># 如果为false，消息无法到达就会抛弃</span></span><br><span class="line"><span class="string">spring.rabbitmq.template.mandatory=true</span></span><br></pre></td></tr></table></figure><hr><p> 编写生产者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Send</span>  &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="comment">//发送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">       <span class="comment">//CorrelationData对象的作用是作为消息的附加信息传递，我们用它来保存消息的自定义id</span></span><br><span class="line">       <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(person.getUsername() + <span class="string">&quot;&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一个参数rabbitmq-test 交换机名称 第二个参数：路由名称 第三个参数：具体消息  第四个参数：消息的附加信息</span></span><br><span class="line">       rabbitTemplate.convertAndSend(<span class="string">&quot;rabbitmq-test&quot;</span>,<span class="string">&quot;chenghao&quot;</span>,person,correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>编写对应的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Send send;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        send.sendMsg(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chenghao&quot;</span>,<span class="number">26</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">点击test运行，<span class="number">200</span>无问题</span><br></pre></td></tr></table></figure><p><strong>上面代码测试来看，好像能运行，没有什么问题，但我们连交换机都没有注册，让我们加入mq的消息确认机制进一步查看</strong></p><hr><p>加入消息确认机制<strong>ConfirmCallback</strong> 这一步确认消息是否到达rabbitmq服务器，但也就是只确认是否正确到达 Exchange 中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//加入消息确认机制  这一步确认消息是否到达rabbitmq服务器，但也就是只确认是否正确到达 Exchange 中</span></span><br><span class="line">RabbitTemplate.<span class="type">ConfirmCallback</span> <span class="variable">confirmCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ConfirmCallback() &#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * CorrelationData 消息的附加信息，即自定义id</span></span><br><span class="line"><span class="comment">     * isack 代表消息是否被rabbitmq接收 true 代表接收 false代表拒收。</span></span><br><span class="line"><span class="comment">     * cause 如果拒收cause则说明拒收的原因，帮助我们进行后续处理</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">   <span class="meta">@Override</span> </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">confirm</span><span class="params">(CorrelationData correlationData, <span class="type">boolean</span> isack, String cause)</span> &#123;</span><br><span class="line">            System.out.println(correlationData);</span><br><span class="line">            System.out.println(<span class="string">&quot;ack:&quot;</span> + isack);</span><br><span class="line">            <span class="keyword">if</span> (!isack) &#123;</span><br><span class="line">                System.err.println(cause);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//发送消息时将刚创建的confirmCallback 赋值给rabbitTemplate</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">////CorrelationData对象的作用是作为消息的附加信息传递，我们用它来保存消息的自定义id</span></span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(person.getUsername() + <span class="string">&quot;&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">        rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;rabbitmq-test&quot;</span>,<span class="string">&quot;chenghao&quot;</span>,person,correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">控制台结果：</span><br><span class="line">CorrelationData [id=chenghao1566232281561]</span><br><span class="line">ack:<span class="literal">false</span></span><br><span class="line">no exchange <span class="string">&#x27;rabbitmq-test&#x27;</span> in vhost <span class="string">&#x27;/chenghao&#x27;</span></span><br></pre></td></tr></table></figure><p> 根据控制台错误信息发现没有交换机,手动后台管理界面添加交换机，在用debug执行单元测试</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">控制台结果：</span><br><span class="line">CorrelationData [id=chenghao1566232516637]</span><br><span class="line">ack:true</span><br></pre></td></tr></table></figure><p>但是这仅仅只能表示消息现在能够进入交换机中，我们继续加入<strong>ReturnCallback</strong>,表示当交换机找不到队列回调默认方法(相当于投递到了邮局也有可能找不到收件人地址)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">RabbitTemplate.<span class="type">ReturnCallback</span> <span class="variable">returnCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RabbitTemplate</span>.ReturnCallback() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnedMessage</span><span class="params">(Message message, <span class="type">int</span> replyCode, String replyText, String exchange, String routingkey)</span> &#123;</span><br><span class="line">            System.err.println(<span class="string">&quot;Code:&quot;</span> + replyCode + <span class="string">&quot;,Text:&quot;</span> + replyText );</span><br><span class="line">            System.err.println(<span class="string">&quot;Exchange:&quot;</span> + exchange + <span class="string">&quot;,RoutingKey:&quot;</span> + routingkey );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"><span class="comment">//发送消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsg</span><span class="params">(Person person)</span>&#123;</span><br><span class="line">        <span class="comment">////CorrelationData对象的作用是作为消息的附加信息传递，我们用它来保存消息的自定义id</span></span><br><span class="line">        <span class="type">CorrelationData</span> <span class="variable">correlationData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorrelationData</span>(person.getUsername() + <span class="string">&quot;&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().getTime());</span><br><span class="line">        rabbitTemplate.setConfirmCallback(confirmCallback);</span><br><span class="line">        rabbitTemplate.setReturnCallback(returnCallback);</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">&quot;rabbitmq-test&quot;</span>,<span class="string">&quot;chenghao&quot;</span>,person,correlationData);</span><br><span class="line">    &#125;</span><br><span class="line">控制台结果：</span><br><span class="line">Code:<span class="number">312</span>,Text:NO_ROUTE</span><br><span class="line">Exchange:rabbitmq-test,RoutingKey:chenghao</span><br><span class="line">CorrelationData [id=chenghao1566231274946]</span><br><span class="line">ack:<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>消息并没有进入队列中，我们通过rabbitmq后台管理手动添加queue，添加上了交换机和队列，测试通过,查看后台管理界面，消息已经存入队列等待消费</p><hr><h3 id="消费者"><a href="#消费者" class="headerlink" title="消费者"></a><strong>消费者</strong></h3><p> 消费端和生产端一样，首先导入依赖，编写配置文件，在配置文件中基本连接信息不变，补充</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#手动确认消息</span></span><br><span class="line"><span class="string">spring.rabbitmq.listener.simple.acknowledge-mode=manual</span></span><br><span class="line"><span class="comment">#最小的消费者数量，一开始默认为1个消费者</span></span><br><span class="line"><span class="string">spring.rabbitmq.listener.simple.concurrency=1</span></span><br><span class="line"><span class="comment">#最大的消费者数量，如果消息过多，最多创建5个消费者</span></span><br><span class="line"><span class="string">spring.rabbitmq.listener.simple.max-concurrency=5</span></span><br></pre></td></tr></table></figure><hr><p> 消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MessageConsumer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@RabbitListener注解用于声明式定义消息接受的队列与exhcange绑定的信息</span></span><br><span class="line">    <span class="meta">@RabbitListener(</span></span><br><span class="line"><span class="meta">            bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">                    value = @Queue(value=&quot;rabbitmq-consumer&quot; , durable=&quot;true&quot;),</span></span><br><span class="line"><span class="meta">                    exchange = @Exchange(value = &quot;rabbitmq-test&quot;) ,</span></span><br><span class="line"><span class="meta">                    key = &quot;chenghao&quot;</span></span><br><span class="line"><span class="meta">            )</span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="comment">//@Payload 代表运行时将消息反序列化后注入到后面的参数中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@Payload</span> Person person , Channel channel ,</span></span><br><span class="line"><span class="params">                              <span class="meta">@Headers</span> Map&lt;String,Object&gt; headers)</span> &#123;</span><br><span class="line">        System.out.println(person.getUsername() + <span class="string">&quot;-&quot;</span> + person.getAge());</span><br><span class="line">        <span class="comment">//所有消息处理后必须进行消息的ack，channel.basicAck()</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">tag</span> <span class="operator">=</span> (Long)headers.get(AmqpHeaders.DELIVERY_TAG);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//false表示不批量接收</span></span><br><span class="line">            channel.basicAck(tag , <span class="literal">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出：</span><br><span class="line">chenghao-<span class="number">29</span></span><br></pre></td></tr></table></figure><p>生产者代码链接<a href="https://github.com/chenghao0529/rabbitmq_product.git">product</a><br>消费者代码链接<a href="https://github.com/chenghao0529/rabbitmq_cunsumer.git">consumer</a></p><hr><h3 id="queue，exhange管理"><a href="#queue，exhange管理" class="headerlink" title="queue，exhange管理"></a>queue，exhange管理</h3><p>通过上一篇springboot整合rabbitmq中已经提到，在发送端如果不创建声明队列和交换机，会出现错误，这个时候我们可以去管理控制台手动创建对应的交换机和队列解决这个问题，但我认为项目中还是加入config写清楚注释方便管理和后来接手的开发人员，在rabbitmq官网也建议在生产端和消费端都进行声明</p><hr><h4 id="管理交换机exhangeConfig"><a href="#管理交换机exhangeConfig" class="headerlink" title="管理交换机exhangeConfig"></a><strong>管理交换机exhangeConfig</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换机配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExchangeConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于测试的交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_EXCHANGE</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用与测试的交换机</span></span><br><span class="line"><span class="comment">     * 第一个参数交换机名称，第二个参数是否持久化，第三个参数是否自动删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span>  DirectExchange <span class="title function_">testExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(TEST_EXCHANGE,<span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="管理队列QueueConfig"><a href="#管理队列QueueConfig" class="headerlink" title="管理队列QueueConfig"></a><strong>管理队列QueueConfig</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 队列配置类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QueueConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_QUEUE</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于和测试交换机绑定</span></span><br><span class="line"><span class="comment">     * 第一个参数表示队列名称，第二个参数表示是否持久化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">testQueue</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(TEST_QUEUE,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="将交换机和队列进行绑定"><a href="#将交换机和队列进行绑定" class="headerlink" title="将交换机和队列进行绑定"></a><strong>将交换机和队列进行绑定</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设定路由键绑定交换机和队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitmqConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> QueueConfig queueConfig;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ExchangeConfig exchangeConfig;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TEST_ROUTINGKEY</span> <span class="operator">=</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定test交换机和test队列,路由键test</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bing_test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queueConfig.testQueue())</span><br><span class="line">                .to(exchangeConfig.testExchange())</span><br><span class="line">                .with(TEST_ROUTINGKEY);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   send.sendMsg(<span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;chenghao&quot;</span>,<span class="number">18</span>));</span><br><span class="line">   TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line">运行结果：</span><br><span class="line">CorrelationData [id=chenghao1567846017404]</span><br><span class="line">ack:<span class="literal">true</span></span><br><span class="line">消息也成功接收到了</span><br></pre></td></tr></table></figure><p>此处为什么加入休眠，因为测试方法结束，rabbitmq相关的资源也就关闭了，虽然我们的消息发送出去，但异步的ConfirmCallback却由于资源关闭</p>]]></content>
      
      
      <categories>
          
          <category> mq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务简单介绍和事物失效</title>
      <link href="/2022/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88/"/>
      <url>/2022/12/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库事务失效"><a href="#数据库事务失效" class="headerlink" title="数据库事务失效"></a>数据库事务失效</h1><p>数据库事务（Database Transaction）：将有限系列的执行命令作为单个逻辑执行单元，单元内的任务要么全部 成功，要么全部失败。数据库事务拥有四大特性，通常称为ACID，具体说明如下</p><ol><li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行</li><li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束</li><li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行</li><li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中</li></ol><hr><p>spring的注解@Transactional使用也存在一些限制和注意的问题还是来看看具体的例子，看看到底是什么原因导致事务失效呢？</p><h5 id="1-无事务"><a href="#1-无事务" class="headerlink" title="1. 无事务"></a>1. 无事务</h5><p>方法不加注解抛异常，执行有异常抛出，z1表成功新增一条记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    db.update(<span class="string">&quot;insert into z1(c1) values(&#x27;2&#x27;)&quot;</span>);   </span><br><span class="line">    <span class="comment">// 主动抛出异常 测试回滚</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;111&quot;</span>)) &#123;            <span class="comment">// 空指针异常</span></span><br><span class="line">        db.update(<span class="string">&quot;insert into z2(c1,c2) values(&#x27;2&#x27;,&#x27;3&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-有事务且是同一个方法"><a href="#2-有事务且是同一个方法" class="headerlink" title="2.有事务且是同一个方法"></a>2.有事务且是同一个方法</h5><p>方法加注解抛异常，执行有异常抛出，z1、z2表都没有新增记录，事务正常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    db.update(<span class="string">&quot;insert into z1(c1) values(&#x27;2&#x27;)&quot;</span>);</span><br><span class="line">    <span class="comment">// 主动抛出异常 测试回滚</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;111&quot;</span>)) &#123;        <span class="comment">// 空指针异常</span></span><br><span class="line">        db.update(<span class="string">&quot;insert into z2(c1,c2) values(&#x27;2&#x27;,&#x27;3&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-有事务且事务仅在第一个方法上"><a href="#3-有事务且事务仅在第一个方法上" class="headerlink" title="3.有事务且事务仅在第一个方法上"></a>3.有事务且事务仅在第一个方法上</h5><p>方法加注解并调用该类其他方法并抛异常，执行有异常抛出，z1、z2表无新增记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    db.update(<span class="string">&quot;insert into z1(c1) values(&#x27;2&#x27;)&quot;</span>);</span><br><span class="line">    testTransaction2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 主动抛出异常 测试回滚</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;111&quot;</span>)) &#123;</span><br><span class="line">        db.update(<span class="string">&quot;insert into z2(c1,c2) values(&#x27;2&#x27;,&#x27;3&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-有事务事务在被调用者上，本地方法调用"><a href="#4-有事务事务在被调用者上，本地方法调用" class="headerlink" title="4.有事务事务在被调用者上，本地方法调用"></a>4.有事务事务在被调用者上，本地方法调用</h5><p>调用含注解的方法并抛异常，执行有异常抛出，z1表新增记录、z2表无新增记录，事务失效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction</span><span class="params">()</span> &#123;</span><br><span class="line">    testTransaction3();</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransaction3</span><span class="params">()</span> &#123;</span><br><span class="line">    db.update(<span class="string">&quot;insert into z1(c1) values(&#x27;2&#x27;)&quot;</span>);</span><br><span class="line">    <span class="comment">// 测试</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (str.startsWith(<span class="string">&quot;111&quot;</span>)) &#123;</span><br><span class="line">        db.update(<span class="string">&quot;insert into z1(c1) values(&#x27;adff2&#x27;)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p> 为什么事务会失效呢？关于这一点Spring Transactional官方说明如下:</p><ol><li>在代理下（默认或当配置为proxy-target-class=”true”），只有当前代理类的外部方法调用注解方法时代理才会被拦截。事实上，这意味着：一个目标对象的方法调用该目标对象的另外一个方法，即使被调用的方法已使用了@Transactional注解标记，事务也不会有效执行。</li><li>AOP使用的是动态代理的机制，它会给类生成一个代理类，注解相关操作都在代理类上完成。内部方式使用this或者直接调用时，使用的是实例调用，并没有通过代理类调用方法，所以会导致注解失效。</li><li>@Transactional注解只对代理类时的public方法有效，被protected、private、package-visible修饰的方法使用@Transactional注解无效</li></ol>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8入门</title>
      <link href="/2022/12/22/java8%E5%85%A5%E9%97%A8/"/>
      <url>/2022/12/22/java8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java8实战"><a href="#java8实战" class="headerlink" title="java8实战"></a>java8实战</h1><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p> java8中最重要的新特性，lambda表达式的使用场景:任何有<a href="https://www.runoob.com/java/java8-functional-interfaces.html">函数式接口</a>(有且仅有一个抽象方法，但是可以有多个非抽象方法的接口)的地方，Lambda把函数作为一个方法的参数,因此代码更加简洁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * lambda表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLambda</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  Runnable 类上有<span class="doctag">@FunctionalInterface</span>作为函数式接口标示</span></span><br><span class="line"><span class="comment">        *  无参数，无返回值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;lambda入门第一列&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       r1.run();</span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;System.out.println(<span class="string">&quot;lambda入门第一列包含大括号&quot;</span>);&#125;;</span><br><span class="line">       r2.run();</span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r3</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;lambda入门第一列不包含大括号&quot;</span>);</span><br><span class="line">       r3.run();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  无参数，有返回值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Callable&lt;String&gt; c1 = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       Callable&lt;String&gt; c2 = () -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;hello有括号&quot;</span>;&#125;;</span><br><span class="line">       Callable&lt;String&gt; c3 = () -&gt; <span class="string">&quot;hello无括号&quot;</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(c1.call());</span><br><span class="line">       System.out.println(c2.call());</span><br><span class="line">       System.out.println(c3.call());</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 有参数有返回</span></span><br><span class="line"><span class="comment">        * 输入一个字符串，返回输入字符串的大写</span></span><br><span class="line"><span class="comment">        * aaa -&gt; AAA</span></span><br><span class="line"><span class="comment">        * Function 一个输入一个输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Function&lt;String, String&gt; fn = (str) -&gt; str.toUpperCase();</span><br><span class="line">       System.out.println(fn.apply(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 有参数无返回</span></span><br><span class="line"><span class="comment">        * Consumer 一个输入</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Consumer&lt;String&gt; c = arg -&gt; &#123;System.out.println(arg);&#125;;</span><br><span class="line">       c.accept(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  forEach(Consumer&lt;? super T&gt; action)</span></span><br><span class="line"><span class="comment">        *  实际上集合的遍历，里面用的就是输入型function</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;chenghao&quot;</span>, <span class="string">&quot;xiaode&quot;</span>, <span class="string">&quot;jiajia&quot;</span>);</span><br><span class="line">       stringList.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p> 方法引用通过方法的名字来指向一个方法,使用冒号::表示引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuoteDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testQuote</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  静态方法引用</span></span><br><span class="line"><span class="comment">         *  如果函数式接口的实现恰好是通过调用一个静态方法来实现，那么就可以使用静态方法引用</span></span><br><span class="line"><span class="comment">         *  类名::staticMethod</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier1</span> <span class="operator">=</span> () -&gt; Person.study();</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier2</span> <span class="operator">=</span> Person::study;</span><br><span class="line">        System.out.println(supplier2.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *实例方法引用</span></span><br><span class="line"><span class="comment">         *如果函数式接口的实现恰好可以通过调用一个实例的实例方法来实现，那么就可以使用实例方法引用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Function&lt;String,String&gt; function1 = str -&gt; <span class="keyword">new</span> <span class="title class_">Change</span>().change(str);</span><br><span class="line">        System.out.println(function1.apply(<span class="string">&quot;test1&quot;</span>));</span><br><span class="line">        Function&lt;String,String&gt; function2 = <span class="keyword">new</span> <span class="title class_">Change</span>()::change;</span><br><span class="line">        System.out.println(function2.apply(<span class="string">&quot;test2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造器引用</span></span><br><span class="line"><span class="comment">         * 比如在jpa中findById查找后，返回Optional,调用orElseThrow(自定义异常::new)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Supplier&lt;Person&gt; s1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        s1.get();</span><br><span class="line">        Supplier&lt;Person&gt; s2 = Person::<span class="keyword">new</span>;</span><br><span class="line">        s2.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testQuote();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Change</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">change</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>stream是用来处理数组和集合的API,Stream分为源source，多个中间操作，一个终止操作</p><ol><li>源source可以是数组，集合，Stream.generate,Stream.iterate或者其它API进行创建</li><li>中间操作可以是零个或者多个，每一个中间操作会生成新的流。</li><li>流只有在遇到终止操作，它的流才开始遍历</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createStream</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  利用数组创建stream</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] arr =&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(arr);</span><br><span class="line">        stream1.forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  利用集合创建stream</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream2 = stringList.stream();</span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  filter</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).stream()</span><br><span class="line">                .filter(x -&gt; x%<span class="number">2</span>==<span class="number">0</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * distinct</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>).stream()</span><br><span class="line">                .distinct().forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * sorted</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>).stream()</span><br><span class="line">                .sorted().forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="string">&quot;13&quot;</span>,<span class="string">&quot;12&quot;</span>).stream()</span><br><span class="line">                .map(Integer::valueOf).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * mapToInt sum</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.asList(<span class="number">16</span>, <span class="number">17</span>).stream()</span><br><span class="line">                .mapToInt(x -&gt; x).sum();</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * limit</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">20</span>,<span class="number">23</span>,<span class="number">99</span>,<span class="number">88</span>).stream()</span><br><span class="line">                .limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * max,min</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> Arrays.asList(<span class="number">10</span>, <span class="number">14</span>, <span class="number">12</span>).stream()</span><br><span class="line">                .max((a, b) -&gt; a - b).get();</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  从1-50里面的所有偶数找出来你，放到一个list里面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">List&lt;Integer&gt; list = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">1</span>).limit(<span class="number">50</span>)</span><br><span class="line">                .filter(x -&gt; x%<span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        createStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="综合应用实战篇"><a href="#综合应用实战篇" class="headerlink" title="综合应用实战篇"></a>综合应用实战篇</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  实战1  获取url后面的参数</span></span><br><span class="line"><span class="comment">         *  index.action?username=chenghao&amp;userId=1&amp;type=20&amp;token=adfded&amp;age=18</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String str=<span class="string">&quot;username=chenghao&amp;userId=1&amp;type=20&amp;token=adfded&amp;age=18&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt; urlMap = Stream.of(str.split(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">        .map(x -&gt; x.split(<span class="string">&quot;=&quot;</span>))</span><br><span class="line">        .collect(Collectors.toMap(s -&gt; s[<span class="number">0</span>], s -&gt; s[<span class="number">1</span>]));</span><br><span class="line">        System.out.println(urlMap);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  实战2 只将集合中id返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Book&gt; books = Book.books();</span><br><span class="line">        List&lt;Integer&gt; collect = books.stream()</span><br><span class="line">                .map(Book::getId).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战3 将书的类型去重后返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; collect1 = Book.books().stream()</span><br><span class="line">                .map(Book::getType).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line">      </span><br><span class="line">        Set&lt;String&gt; collect2 = Book.books().stream()</span><br><span class="line">                .map(Book::getType).collect(Collectors.toSet());</span><br><span class="line">        System.out.println(collect2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战4 将书的价格大于60，按发版日期降序传给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Book.books().stream().filter(book -&gt; book.getPrice()&gt;<span class="number">60</span>)</span><br><span class="line">                .sorted(Comparator.comparing(Book::getPublishDate).reversed())</span><br><span class="line">                .forEach(System.out::print);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战5 转map 将book 转换为对应id 的map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;Integer, Book&gt; map = Book.books().stream()</span><br><span class="line">                .collect(Collectors.toMap(Book::getId, book -&gt; book));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战6 最大小  将book最贵的返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Optional&lt;Book&gt; collect3 = Book.books().stream()</span><br><span class="line">              .collect(Collectors.maxBy(Comparator.comparing(Book::getPrice)));</span><br><span class="line">        System.out.println(collect3);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战7 按类型分组后，取每组价格最高端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Optional&lt;Book&gt;&gt; collect4 = Book.books().stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Book::getType, </span><br><span class="line">           Collectors.maxBy(Comparator.comparing(Book::getPrice))));</span><br><span class="line">        System.out.println(collect4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>定时任务介绍</title>
      <link href="/2022/12/22/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%85%A5%E9%97%A8%E7%AF%87/"/>
      <url>/2022/12/22/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E5%85%A5%E9%97%A8%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><h3 id="timer类"><a href="#timer类" class="headerlink" title="timer类"></a><strong>timer类</strong></h3><p>public void schedule(TimerTask task, long delay, long period)</p><ol><li>task – 所要安排的任务</li><li>delay – 执行任务前的延迟时间，单位是毫秒</li><li>period – 执行各后续任务之间的时间间隔，单位是毫秒</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;timer1的定时任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;timer2的定时任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出</span><br><span class="line">timer1的定时任务</span><br><span class="line">timer2的定时任务</span><br><span class="line">timer1的定时任务</span><br><span class="line">timer1的定时任务</span><br><span class="line">timer2的定时任务</span><br></pre></td></tr></table></figure><p>timer存在问题点：</p><p>通过点击TimerTask类源码发现，TimerTask实现了Runnable接口，覆写了run方法，timer实际是利用多线程进行处理定时任务，如果此刻TimerTask任务出现异常，而Timer类并不会处理，将终止timer线程，这种情况下，Timer也不会再重新恢复线程的执行了;它错误的认为整个Timer都被取消了。此时，已经被安排但尚未执行的TimerTask永远不会再执行了，新的任务也不能被调度了。我们将timer2的任务中加入异常，进行测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimerDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Timer</span> <span class="variable">timer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;timer1的定时任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>, <span class="number">1000</span>);</span><br><span class="line">        timer.schedule(<span class="keyword">new</span> <span class="title class_">TimerTask</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">//模拟某一定时任务出现异常情况</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">                System.out.println(<span class="string">&quot;timer2的定时任务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="number">0</span>,<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出</span><br><span class="line">Exception in thread <span class="string">&quot;Timer-0&quot;</span> java.lang.ArithmeticException: / by zero</span><br><span class="line">    at com.chenghao.timer.TimerDemo$<span class="number">2.</span>run(TimerDemo.java:<span class="number">22</span>)</span><br><span class="line">    at java.util.TimerThread.mainLoop(Timer.java:<span class="number">555</span>)</span><br><span class="line">    at java.util.TimerThread.run(Timer.java:<span class="number">505</span>)</span><br><span class="line">timer1的定时任务</span><br></pre></td></tr></table></figure><p> 可以看出利用Timer类有着致命的缺陷，因此我们引入成熟的quartz框架</p><hr><h3 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a><strong>Quartz</strong></h3><p>quartz核心概念有三个</p><ol><li>JobDetail与业务类进行绑定，业务类可以通过继承QuartzJobBean或者实现job接口实现</li><li>Trigger触发器 可以配置定时任务的时间，提供了cron表达式，方便简洁</li><li>Scheduler 调度器，对业务类和触发器进行管理，启动</li></ol><p>先进行简单实现，具体实现后面有详细说明</p><p> 1 引入quartz的依赖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;<span class="number">2.3</span>.<span class="number">0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>2  编写作业类，及具体业务类代码，如给用户发送生日短信</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建作业类，公司具体业务</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">job</span> <span class="keyword">implements</span> <span class="title class_">Job</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;开启quartz任务&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3 编写JobDetail，Trigger触发器，Scheduler 调度器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuartzDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SchedulerException &#123;</span><br><span class="line">        <span class="comment">//创建jobDetail,与job业务类进行绑定</span></span><br><span class="line">        <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Myjob.class).withIdentity(<span class="string">&quot;job&quot;</span>).build();</span><br><span class="line">        <span class="comment">//创建触发器Trigger startNow()立即执行  withSchedule() 加入执行时间</span></span><br><span class="line">        <span class="type">SimpleTrigger</span> <span class="variable">myTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;myTrigger&quot;</span>).startNow().withSchedule(SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(<span class="number">3</span>).repeatForever()).build();</span><br><span class="line">        <span class="comment">//创建schedule实例</span></span><br><span class="line">        <span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>().getScheduler();</span><br><span class="line">        scheduler.start();</span><br><span class="line">        scheduler.scheduleJob(jobDetail,myTrigger);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出</span><br><span class="line">开启quartz任务</span><br><span class="line">开启quartz任务</span><br><span class="line">开启quartz任务</span><br><span class="line">开启quartz任务</span><br></pre></td></tr></table></figure><p>至此，我们利用quartz进行简单定时任务已经完成了，我们开始进一步讲解JobDetail，Trigger触发器，Scheduler 调度器核心三要素,可以发现三者的实例都是通过Builder模式进行创建的，通过调用builder的set中方法，来设置参数，这样就保证了在生成实例的时候直接就绑定了数据，我们具体看看源码里面实现</p><hr><h4 id="JobDetail部分源码"><a href="#JobDetail部分源码" class="headerlink" title="JobDetail部分源码"></a><strong>JobDetail部分源码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JobBuilder中一些字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JobBuilder</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  将Job和Trigger注册到Scheduler时，可以为它们设置key，配置其身份属性。</span></span><br><span class="line"><span class="keyword">private</span> JobKey key;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  具体业务类当Job的一个trigger被触发时,execute（）方法由调度程序的一个工作线程调用</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">Job</span>&gt; jobClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  JobExecutionContext对象中保存着该job运行时的一些信息  </span></span><br><span class="line"><span class="keyword">private</span> <span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobDataMap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> JobDetail jobDetail = JobBuilder.newJob(Myjob.class).withIdentity(“job”).build();具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">第一步 newJob</span><br><span class="line">JobBuilder.newJob(Myjob.class)--》</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JobBuilder <span class="title function_">newJob</span><span class="params">(Class&lt;? extends Job&gt; jobClass)</span> &#123;</span><br><span class="line">        <span class="type">JobBuilder</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobBuilder</span>();</span><br><span class="line">        b.ofType(jobClass);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> JobBuilder <span class="title function_">ofType</span><span class="params">(Class&lt;? extends Job&gt; jobClazz)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.jobClass = jobClazz;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//可以发现是很简单的，设置jobClass属性值</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">第二步 withIdentity</span><br><span class="line">JobBuilder.newJob(Myjob.class).withIdentity(<span class="string">&quot;job&quot;</span>) -》</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> JobBuilder <span class="title function_">withIdentity</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.key = <span class="keyword">new</span> <span class="title class_">JobKey</span>(name, (String)<span class="literal">null</span>);<span class="comment">//调用了两个参数的构造器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">JobKey</span><span class="params">(String name, String group)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, group); <span class="comment">// jobKey 继承Key</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Key</span><span class="params">(String name, String group)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Name cannot be null.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">if</span>(group != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.group = group;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.group = <span class="string">&quot;DEFAULT&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//给JobKey属性赋值完成，如果不传group，默认名为DEFAULT</span></span><br></pre></td></tr></table></figure><hr><h4 id="Triggers部分源码"><a href="#Triggers部分源码" class="headerlink" title="Triggers部分源码"></a><strong>Triggers部分源码</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TriggerBuilder中一些字段</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TriggerBuilder</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Trigger</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> TriggerKey key;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Date</span> <span class="variable">startTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="keyword">private</span> Date endTime;</span><br><span class="line">    <span class="keyword">private</span> JobKey jobKey;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">JobDataMap</span> <span class="variable">jobDataMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobDataMap</span>();</span><br><span class="line">    <span class="keyword">private</span> ScheduleBuilder&lt;?&gt; scheduleBuilder = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TriggerBuilder.newTrigger().withIdentity(“myTrigger”)和上面处理过程几部一样，TriggerKey属性和JobBuilder类中JobKey属性都继承与Key,重点讲解Trigger的两种触发器，一种指定时间执行，一种按指定频率执行</p><h5 id="1-SimpleScheduleBuilder"><a href="#1-SimpleScheduleBuilder" class="headerlink" title="1.  SimpleScheduleBuilder"></a>1.  <strong>SimpleScheduleBuilder</strong></h5><p>上述代码中创建Trigger方法中使用的SimpleScheduleBuilder，满足的调度需求是：在具体的时间点执行一次，或者在具体的时间点执行，并且以指定的间隔重复执行若干次具体看下部分源码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleScheduleBuilder</span> <span class="keyword">extends</span> <span class="title class_">ScheduleBuilder</span>&lt;SimpleTrigger&gt; &#123;</span><br><span class="line">    <span class="comment">// 触发器的时间间隔，单位毫秒</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">interval</span> <span class="operator">=</span> <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重复次数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">repeatCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SimpleScheduleBuilder.simpleSchedule().withIntervalInSeconds(3).repeatForever() 及表示3秒触发一次， repeatForever() 方法及给repeatCount=0表示不重复启用，返回的TriggerBuilder类可以用来设置开始时间和结束时间，接下来介绍的触发器CronTrigger更加有用</p><h5 id="2-CronTrigger"><a href="#2-CronTrigger" class="headerlink" title="2.  CronTrigger"></a>2.  <strong>CronTrigger</strong></h5><p>通常比Simple Trigger更有用，如果您需要基于日历的概念而不是按照SimpleTrigger的精确指定间隔进行重新启动的作业启动计划。使用CronTrigger, Cron Expressions是由七个子表达式组成的字符串，用于描述日程表的各个细节.</p><p>**   表示匹配该域的任意值，假如在Minutes域使用* *,即表示每分钟都会触发事件</p><p> ?    用在DayofMonth和DayofWeek会相互影响,指定一个另一个必须为？ 例如想在每月的20日触发调度，不管20日到底是星期几，则只能使用如下写法： 13 13 15 20 * ?, 其中最后一位只能用？，而不能使用<em>，如果使用</em>表示不管星期几都会触发，实际上并不是这样。</p><ol><li>0 0/5 * * * ？ – 每5分钟就会触发一次</li><li>10 0/5 * * * ？– 每5分钟触发一次，分钟后10秒（比如上午10时10分触发，下次上午10:05:10等）</li><li>0 30 10-13 ？* WED，FRI – 在每个星期三和星期五的10:30，11:30，12:30和13:30创建触发器的表达式</li><li>0 0/30 8-9 5,20  * ？ -创建触发器的表达式，每个月5日和20日上午8点至9点之间每半小时触发一次。请注 意，触发器将不会在上午10点开始，仅在8:00，8:30，9:00和9:30</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建jobDetail,与job业务类进行绑定</span></span><br><span class="line"><span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(Myjob.class).withIdentity(<span class="string">&quot;job&quot;</span>).build();</span><br><span class="line"><span class="type">CronTrigger</span> <span class="variable">myTrigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;myTrigger1&quot;</span>).withSchedule(CronScheduleBuilder.cronSchedule(<span class="string">&quot;* * * * * ? &quot;</span>)).build();</span><br><span class="line"><span class="comment">//创建schedule实例</span></span><br><span class="line"><span class="type">Scheduler</span> <span class="variable">scheduler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StdSchedulerFactory</span>().getScheduler();</span><br><span class="line">scheduler.start();</span><br><span class="line">scheduler.scheduleJob(jobDetail,myTrigger);</span><br></pre></td></tr></table></figure><hr><h3 id="springboot-qurartz"><a href="#springboot-qurartz" class="headerlink" title="springboot+qurartz"></a><strong>springboot+qurartz</strong></h3><ol><li>启动类添加@EnableScheduling注解</li><li>定时任务类添加@Component被容器扫描</li><li>定时任务的方法添加@Scheduled(cron = “0 41 23 11 8 ? “)表达式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动类</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SchedulerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(SchedulerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试类  </span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">springbootQuartzDemo</span>  &#123;</span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0 41 23 11 8 ? &quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;springbootQuartzDemo定时任务开启&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出</span><br><span class="line">springbootQuartzDemo定时任务开启</span><br></pre></td></tr></table></figure><p> <a href="https://github.com/chenghao0529/scheduler.git"><strong>click</strong></a> 获取源码</p>]]></content>
      
      
      <categories>
          
          <category> job </category>
          
      </categories>
      
      
        <tags>
            
            <tag> quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高效</title>
      <link href="/2022/12/21/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/12/21/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java编码技巧之高效代码"><a href="#Java编码技巧之高效代码" class="headerlink" title="Java编码技巧之高效代码"></a>Java编码技巧之高效代码</h1><h4 id="1-成员变量无需更改的时候，尽量定义位静态的"><a href="#1-成员变量无需更改的时候，尽量定义位静态的" class="headerlink" title="1 成员变量无需更改的时候，尽量定义位静态的"></a>1 成员变量无需更改的时候，尽量定义位静态的</h4><p>  无论一个类实例化多少对象，它的静态变量只有一份拷贝</p><h6 id="反列："><a href="#反列：" class="headerlink" title="反列："></a>反列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列："><a href="#正列：" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIMEOUT</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Static</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//private int count=0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">Static() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">add();  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Static</span> <span class="variable">static1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Static</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;start:&quot;</span>+static1.getCount());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">static1=<span class="keyword">new</span> <span class="title class_">Static</span>();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;end:&quot;</span>+static1.getCount());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出：</span><br><span class="line">    start:<span class="number">1</span></span><br><span class="line">    end:<span class="number">11</span></span><br><span class="line">如果不使用静态变量</span><br><span class="line">    start:<span class="number">1</span></span><br><span class="line">    end:<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h4 id="2-如果变量的初值会被覆盖，就没有必要给变量赋初值"><a href="#2-如果变量的初值会被覆盖，就没有必要给变量赋初值" class="headerlink" title="2 如果变量的初值会被覆盖，就没有必要给变量赋初值"></a>2 如果变量的初值会被覆盖，就没有必要给变量赋初值</h4><h6 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-1"><a href="#正列：-1" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-尽量使用函数内的基本类型临时变量"><a href="#3-尽量使用函数内的基本类型临时变量" class="headerlink" title="3 尽量使用函数内的基本类型临时变量"></a>3 尽量使用函数内的基本类型临时变量</h4><p>在函数中，基本类型的的参数和变量都保存在栈中,访问速度快 引用类型的参数和临时变量引用都保存在栈中，而实际内容在堆中存储，访问较慢,在类中，任何类型的成员变量都保存在堆中，访问慢</p><h6 id="反例：-1"><a href="#反例：-1" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="type">double</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value : values) &#123;</span><br><span class="line">            result += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-2"><a href="#正列：-2" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="type">double</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value : values) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        result += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-尽量不使用反射赋值对象"><a href="#4-尽量不使用反射赋值对象" class="headerlink" title="4 尽量不使用反射赋值对象"></a>4 尽量不使用反射赋值对象</h4><p> 用反射赋值对象，主要优点是节省了代码量，主要缺点却是性能有所下降 （BeanUtils.copyProperties）</p><h6 id="反例：-2"><a href="#反例：-2" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(userDO, userVO);</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-3"><a href="#正列：-3" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断"><a href="#5-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断" class="headerlink" title="5 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断"></a>5 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断</h4><h6 id="反例：-3"><a href="#反例：-3" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(Double value1, Double value2)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">double1</span> <span class="operator">=</span> Objects.isNull(value1) ? <span class="number">0.0D</span> : value1;</span><br><span class="line">    <span class="type">double</span> <span class="variable">double2</span> <span class="operator">=</span> Objects.isNull(value2) ? <span class="number">0.0D</span> : value2;</span><br><span class="line">    <span class="keyword">return</span> double1 + double2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-4"><a href="#正列：-4" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> value1, <span class="type">double</span> value2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断"><a href="#6-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断" class="headerlink" title="6 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断"></a>6 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断</h4><p>在JDK类库的方法中，很多方法返回值都采用了基本数据类型，首先是为了避免不必要的装箱和拆箱，其次是为了避免返回值的空指针判断。比如：Collection.isEmpty()和Map.size()。</p><h6 id="反例：-4"><a href="#反例：-4" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isValid</span><span class="params">(UserDO user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"><span class="type">UserDO</span> <span class="variable">user</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> isValid(user);</span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(isValid) &amp;&amp; isValid.booleanValue()) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-5"><a href="#正列：-5" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(UserDO user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"><span class="type">UserDO</span> <span class="variable">user</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="keyword">if</span> (isValid(user)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="7-尽量减少方法的重复调用"><a href="#7-尽量减少方法的重复调用" class="headerlink" title="7 尽量减少方法的重复调用"></a>7 尽量减少方法的重复调用</h4><h6 id="反例：-5"><a href="#反例：-5" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-6"><a href="#正列：-6" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="type">int</span> <span class="variable">userLength</span> <span class="operator">=</span> userList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userLength; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="8-尽量不要在循环体外定义对象引用"><a href="#8-尽量不要在循环体外定义对象引用" class="headerlink" title="8 尽量不要在循环体外定义对象引用"></a>8 尽量不要在循环体外定义对象引用</h4><p>在老版JDK里，建议“尽量不要在循环体内定义对象引用”，但是在新版JDK已经做了优化。通过对编译后的字节码分析，对象引用定义在循环体外和循环体内没有本质的区别，运行效率基本上一样。反而，根据“ 局部变量作用域最小化 ”，变量定义在循环体内更科学更便于维护，避免了大对象延长生命周期导致延缓回收问题 。</p><h6 id="反例：-6"><a href="#反例：-6" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserVO userVO;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userVO = <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-7"><a href="#正列：-7" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="9-尽量不要使用正则表达式匹配"><a href="#9-尽量不要使用正则表达式匹配" class="headerlink" title="9 尽量不要使用正则表达式匹配"></a>9 尽量不要使用正则表达式匹配</h4><p> 正则表达式匹配效率较低，尽量使用字符串匹配操作。</p><h6 id="反例：-7"><a href="#反例：-7" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> source.replaceAll(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">Stringp[] targets = source.split(<span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><h6 id="正列：-8"><a href="#正列：-8" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> source.replace(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">Stringp[] targets = StringUtils.split(source, <span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="10-尽量重复使用同一缓冲区"><a href="#10-尽量重复使用同一缓冲区" class="headerlink" title="10 尽量重复使用同一缓冲区"></a>10 尽量重复使用同一缓冲区</h4><p> 针对缓冲区，Java虚拟机需要花时间生成对象，还要花时间进行垃圾回收处理。所以，尽量重复利用缓冲区。</p><h6 id="反例：-8"><a href="#反例：-8" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder1.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder1.toString());</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder2.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(builder2.toString());</span><br></pre></td></tr></table></figure><h5 id="正列：-9"><a href="#正列：-9" class="headerlink" title="正列："></a>正列：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder.toString());</span><br><span class="line">builder.setLength(<span class="number">0</span>);</span><br><span class="line">builder.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(builder.toString());</span><br></pre></td></tr></table></figure><hr><h4 id="11-在多线程中，尽量使用线程安全类"><a href="#11-在多线程中，尽量使用线程安全类" class="headerlink" title="11 在多线程中，尽量使用线程安全类"></a>11 在多线程中，尽量使用线程安全类</h4><p> 使用线程安全类，比自己实现的同步代码更简洁更高效。</p><h6 id="反例：-9"><a href="#反例：-9" class="headerlink" title="反例："></a>反例：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正列：-10"><a href="#正列：-10" class="headerlink" title="正列："></a>正列：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    counter.incrementAndGet();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> code </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本操作</title>
      <link href="/2022/12/21/docker/"/>
      <url>/2022/12/21/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="DOCKER"><a href="#DOCKER" class="headerlink" title="DOCKER"></a>DOCKER</h1><h3 id="1-linux环境安装"><a href="#1-linux环境安装" class="headerlink" title="1 linux环境安装"></a>1 linux环境安装</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载最新的官方docker的yum源</span><br><span class="line">curl https:<span class="comment">//download.docker.com/linux/centos/docker-ce.repo -o  /etc/yum.repos.d/docker.repo</span></span><br><span class="line">可以通过yum list ｜ grep docker 查看一下最新的版本</span><br><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><hr><h3 id="2-镜像打标签-docker-tag-镜像-xxx"><a href="#2-镜像打标签-docker-tag-镜像-xxx" class="headerlink" title="2 镜像打标签 docker tag  镜像   xxx"></a>2 镜像打标签 docker tag  镜像   xxx</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker tag ubuntu ubuntu_test</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                 latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            latest              2ca708c1c9cc        3 weeks ago   64.2MB</span><br></pre></td></tr></table></figure><p>如果想修改TAG，则使用docker tag 镜像 xxx:xxx 的形式即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker tag ubuntu ubuntu_test:test</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                 latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            test                2ca708c1c9cc        3 weeks ago         64.2MB</span><br></pre></td></tr></table></figure><hr><h3 id="3-打包新的镜像-docker-commit-m-“描述”-a-“操作人员”-CONTAINER-ID-新的镜像名"><a href="#3-打包新的镜像-docker-commit-m-“描述”-a-“操作人员”-CONTAINER-ID-新的镜像名" class="headerlink" title="3 打包新的镜像 docker commit -m “描述” -a “操作人员”   CONTAINER ID   新的镜像名"></a>3 打包新的镜像 docker commit -m “描述” -a “操作人员”   CONTAINER ID   新的镜像名</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;centos install net-tools&quot; -a &quot;chenghao&quot; d56b7d590195  my_centos</span><br><span class="line">sha256:9b8543bb78c7e8ef3a0b00b553bb5995ac39e99995be3a5c94968c2cf79649a8</span><br></pre></td></tr></table></figure><hr><h3 id="4-导出镜像-docker-save-o-xx-tar-镜像"><a href="#4-导出镜像-docker-save-o-xx-tar-镜像" class="headerlink" title="4 导出镜像   docker  save   -o  xx.tar   镜像"></a>4 导出镜像   docker  save   -o  xx.tar   镜像</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save -o my_centos_test.tar centos_with_net_tools</span><br><span class="line">ls</span><br><span class="line">my_centos_test.tar</span><br></pre></td></tr></table></figure><hr><h3 id="5-导入镜像-docker-load-–input-tar-名称-或者-docker-load-lt-xx-tar"><a href="#5-导入镜像-docker-load-–input-tar-名称-或者-docker-load-lt-xx-tar" class="headerlink" title="5 导入镜像 docker load –input tar  名称 或者 docker load &lt; xx.tar"></a>5 导入镜像 docker load –input tar  名称 或者 docker load &lt; xx.tar</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; my_centos_test.tar</span><br><span class="line">1cf8055af1f2: Loading layer [==================================================&gt;]  73.73MB/73.73MB</span><br><span class="line">Loaded image: centos_with_net_tools:latest</span><br></pre></td></tr></table></figure><hr><h3 id="6-删除容器-docker-rm-container-id-如果容器正在运行，加上-f"><a href="#6-删除容器-docker-rm-container-id-如果容器正在运行，加上-f" class="headerlink" title="6 删除容器 docker rm container_id (如果容器正在运行，加上-f)"></a>6 删除容器 docker rm container_id (如果容器正在运行，加上-f)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f my_centos</span><br><span class="line">my_centos</span><br><span class="line">docker  export  container_id  &gt; file.tar  // 导出容器，可以迁移到其他机器上，需要导入</span><br><span class="line">cat file.tar |docker import - aming_test   //这样会生成aming_test的镜像</span><br></pre></td></tr></table></figure><hr><h3 id="7-镜像私有仓库"><a href="#7-镜像私有仓库" class="headerlink" title="7 镜像私有仓库"></a>7 镜像私有仓库</h3><ol><li>下载registry 镜像，我们可以用它来创建本地的docker私有仓库 docker pull registry （registry 服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><ol start="2"><li><p>启动容器，映射端口到宿主机  （registry 服务器）</p><p>-p会把容器的端口映射到宿主机上，:左边为宿主机监听端口，:右边为容器监听端口</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 5000:5000 --name my_registry registry</span><br><span class="line">5a49aaf4b84a3eafc7dc77b1c6c69db816aab1b43d91b4176126378398189ed8</span><br></pre></td></tr></table></figure><ol start="3"><li>检查容器是否映射成功  （registry 服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>标记一下tag，必须要带有私有仓库的ip:port（另一个服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker tag centos_with_net_tools 192.168.31.232:5000/centos</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY          TAG      IMAGE ID              CREATED         SIZE</span><br><span class="line">192.168.31.232:5000/centos   latest    9b8543bb78c7        3 hours ago         276MB</span><br></pre></td></tr></table></figure><ol start="5"><li>推送镜像到私有仓库 （另一个服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.31.232:5000/centos</span><br><span class="line">The push refers to repository [192.168.31.232:5000/centos]</span><br><span class="line">Get https://192.168.31.232:5000/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>warn：发现推送镜像失败，需要添加仓库路径后重新推送,需要https的方法才能上传，我们可以修改下daemon.json来解决, vim /etc/docker/daemon.json （docker重启后，注意重新启动registry容器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [ &quot;https://registry.docker-cn.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;192.168.31.232:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新在尝试推送一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.31.232:5000/centos</span><br><span class="line">The push refers to repository [192.168.31.232:5000/centos]</span><br><span class="line">1cf8055af1f2: Pushed</span><br><span class="line">877b494a9f30: Pushed</span><br><span class="line">latest: digest: sha256:33d629cba22f24ad8f43ada6b72f2b1905a3365a3341fcbd6cb7469834658d49 </span><br></pre></td></tr></table></figure><ol start="6"><li>重新检查registry 服务器，可以发现镜像已经推送成功，这样在其它主机配置相同到仓库地址就可以拉取到镜像了</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;centos&quot;]&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="8-数据管理"><a href="#8-数据管理" class="headerlink" title="8 数据管理"></a>8 数据管理</h3><ol><li>挂载本地的目录到容器里 -v 用来指定挂载目录 :前面的/data/为宿主机本地目录，:后面的/data/为容器里的目录，会在容器中自动创建</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name my_centos -v /usr/local/data/:/usr/local/data centos bash</span><br><span class="line">7261513862ef9a43b59725cef76b7c10df53fe002dc8dcff701b53926ba60426</span><br></pre></td></tr></table></figure><ol start="2"><li>在宿主机新建目录，查看容器目录是否能够同步</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:data chenghao$mkdir test</span><br><span class="line">进入容器</span><br><span class="line">[root@7261513862ef data]# ll</span><br><span class="line">drwxr-xr-x 2 root root 64 Oct 13 15:06 test</span><br></pre></td></tr></table></figure><ol start="3"><li>挂载数据卷 新建一个容器，挂载到上面创建的my_centos容器 (注意–volumes-from 中间不能空格)</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --volumes-from my_centos --name=centos_test centos bash</span><br><span class="line">ad40fc78083e0e5e8a84eb20597b03145de7d6fe66e238cdad8d52dae4e9c85d</span><br></pre></td></tr></table></figure><ol start="4"><li>以后如果我们需要多个容器之间相互共享数据，类似于linux里面的NFS，我们就可以搭建一个专门的数据卷    容器，然后其他容器直接挂载该数据卷。</li></ol><hr><h3 id="9-DOCKERFILE构建镜像"><a href="#9-DOCKERFILE构建镜像" class="headerlink" title="9 DOCKERFILE构建镜像"></a>9 DOCKERFILE构建镜像</h3><ol><li><p>FROM  //指定基于哪个基础镜像</p><p>FROM centos</p></li><li><p>MAINTAINER  //指定作者信息</p><p>MAINTAINER  chenghao</p></li><li><p>RUN  //镜像操作指令</p><p>格式为 RUN 或者 RUN [“executable”, “param1”, “param2”]，比如<br>RUN  yum install  httpd<br>RUN [“/bin/bash”, “-c”, “echo hello”]</p></li><li><p>CMD //用来指定容器启动时用到的命令，只能有一条<br>格式为：CMD [“executable”, “param1”, “param2”]或 CMD command param1 param2 或 CMD [“param1”, “param2”]<br>CMD [“/bin/bash”, “/usr/local/nginx/sbin/nginx”, “-c”, “/usr/local/nginx/conf/nginx.conf”]</p></li><li><p>EXPOSE //映射出去的端口<br>EXPOSE 22 80 8443</p></li><li><p>ENV  //为后续的RUN指令提供一个环境变量<br>ENV PATH /usr/local/mysql/bin:$PATH</p></li><li><p>COPY // 复制文件。 其基本格式：<br>格式1：COPY &lt;源路径&gt;…&lt;目标路径&gt;<br>格式2：COPY [“&lt;源路径1&gt;”,…..”&lt;目标路径&gt;“]</p></li><li><p>ADD // 更高级的复制文件，在COPY的基础上增加了一些功能，如果复制的是压缩包的话，会直接解压，而不需要在使用RUN解压. 将本地的一个文件或目录拷贝到容器的某个目录里。 其中src为Dockerfile所在目录的相对路径，它也可以是一个url，会直接去下载，不需要通过RUN更加的方便。</p></li><li><p>VOLUME //创建一个可以从本地主机或其他容器挂载的挂载点<br>格式  VOLUME [“/data”]</p></li><li><p>ENTRYPOINT // 容器启动时要执行的命令，它和CMD很像，也是只有一条生效，如果写多个只有最后一条有效。和CMD不同是：CMD 是可以被 docker run 指令覆盖的，而ENTRYPOINT不能覆盖</p></li><li><p>USER //指定运行容器的用户<br>格式 USER chenghao</p></li><li><p>WORKDIR //为后续的RUN、CMD或者ENTRYPOINT指定工作目录<br>格式 WORKDIR  /path/to/workdir</p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来源于哪个镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER chenghao javachenghao@<span class="number">163</span>.com</span><br><span class="line"><span class="comment"># 安装相关的依赖</span></span><br><span class="line">RUN yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel</span><br><span class="line"><span class="comment"># 下载nginx</span></span><br><span class="line">ADD http:<span class="comment">//nginx.org/download/nginx-1.18.0.tar.gz .</span></span><br><span class="line"><span class="comment"># 解压nginx</span></span><br><span class="line">RUN tar zxvf nginx-<span class="number">1.8</span>.<span class="number">0</span>.tar.gz</span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">RUN mkdir -p /usr/local/nginx</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">RUN cd nginx-<span class="number">1.8</span>.<span class="number">0</span> &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 打开端口</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"><span class="comment"># 容器启动后执行命令 tail 保证一直运行</span></span><br><span class="line">ENTRYPOINT /usr/local/nginx/sbin/nginx &amp;&amp; tail -f /etc/passwd</span><br></pre></td></tr></table></figure><p>创建镜像：<br>docker build -t centos_nginx  .</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Step 8/9 : EXPOSE 80</span><br><span class="line"> ---&gt; Running in d309fbba6478</span><br><span class="line">Removing intermediate container d309fbba6478</span><br><span class="line"> ---&gt; e069703b2053</span><br><span class="line">Step 9/9 : ENTRYPOINT /usr/local/nginx/sbin/nginx &amp;&amp; tail -f /etc/passwd</span><br><span class="line"> ---&gt; Running in ece236553641</span><br><span class="line">Removing intermediate container ece236553641</span><br><span class="line"> ---&gt; 483bcf6d8150</span><br><span class="line">Successfully built 483bcf6d8150</span><br><span class="line">Successfully tagged nginx:latest</span><br></pre></td></tr></table></figure><p> 启动容器，检验状态 ,发现启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 8080:80 483bcf6d8150 bash</span><br><span class="line">871971b3df433772b452e20059f919f0a8c5a2c5d22ac3981fd33e71016405b0</span><br><span class="line">chenghaodeMacBook-Pro:Documents chenghao$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS            NAMES</span><br><span class="line">871971b3df43        483bcf6d8150        &quot;/bin/sh -c &#x27;/usr/lo…&quot;   4 seconds ago       Up 3 seconds       0.0.0.0:8080-&gt;80/tcp     serene_bartik</span><br><span class="line">chenghaodeMacBook-Pro:Documents chenghao$ curl 127.0.0.1:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="10-docker-logs-f-容器-可以用来查看容器为啥启动不成功"><a href="#10-docker-logs-f-容器-可以用来查看容器为啥启动不成功" class="headerlink" title="10 docker logs -f  容器   可以用来查看容器为啥启动不成功"></a>10 docker logs -f  容器   可以用来查看容器为啥启动不成功</h3>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
