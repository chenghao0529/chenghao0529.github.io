<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java8入门</title>
      <link href="/2022/12/22/java8%E5%85%A5%E9%97%A8/"/>
      <url>/2022/12/22/java8%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="java8实战"><a href="#java8实战" class="headerlink" title="java8实战"></a>java8实战</h1><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p> java8中最重要的新特性，lambda表达式的使用场景:任何有<a href="https://www.runoob.com/java/java8-functional-interfaces.html">函数式接口</a>(有且仅有一个抽象方法，但是可以有多个非抽象方法的接口)的地方，Lambda把函数作为一个方法的参数,因此代码更加简洁 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * lambda表达式</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testLambda</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  Runnable 类上有<span class="doctag">@FunctionalInterface</span>作为函数式接口标示</span></span><br><span class="line"><span class="comment">        *  无参数，无返回值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">               System.out.println(<span class="string">&quot;lambda入门第一列&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line">       r1.run();</span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r2</span> <span class="operator">=</span> () -&gt; &#123;System.out.println(<span class="string">&quot;lambda入门第一列包含大括号&quot;</span>);&#125;;</span><br><span class="line">       r2.run();</span><br><span class="line">       <span class="type">Runnable</span> <span class="variable">r3</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;lambda入门第一列不包含大括号&quot;</span>);</span><br><span class="line">       r3.run();</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  无参数，有返回值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Callable&lt;String&gt; c1 = <span class="keyword">new</span> <span class="title class_">Callable</span>&lt;String&gt;() &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">           <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;;</span><br><span class="line"></span><br><span class="line">       Callable&lt;String&gt; c2 = () -&gt; &#123;<span class="keyword">return</span> <span class="string">&quot;hello有括号&quot;</span>;&#125;;</span><br><span class="line">       Callable&lt;String&gt; c3 = () -&gt; <span class="string">&quot;hello无括号&quot;</span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(c1.call());</span><br><span class="line">       System.out.println(c2.call());</span><br><span class="line">       System.out.println(c3.call());</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 有参数有返回</span></span><br><span class="line"><span class="comment">        * 输入一个字符串，返回输入字符串的大写</span></span><br><span class="line"><span class="comment">        * aaa -&gt; AAA</span></span><br><span class="line"><span class="comment">        * Function 一个输入一个输出</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Function&lt;String, String&gt; fn = (str) -&gt; str.toUpperCase();</span><br><span class="line">       System.out.println(fn.apply(<span class="string">&quot;admin&quot;</span>));</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 有参数无返回</span></span><br><span class="line"><span class="comment">        * Consumer 一个输入</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Consumer&lt;String&gt; c = arg -&gt; &#123;System.out.println(arg);&#125;;</span><br><span class="line">       c.accept(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        *  forEach(Consumer&lt;? super T&gt; action)</span></span><br><span class="line"><span class="comment">        *  实际上集合的遍历，里面用的就是输入型function</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;chenghao&quot;</span>, <span class="string">&quot;xiaode&quot;</span>, <span class="string">&quot;jiajia&quot;</span>);</span><br><span class="line">       stringList.forEach(System.out::println);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p> 方法引用通过方法的名字来指向一个方法,使用冒号::表示引用 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QuoteDemo</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法引用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testQuote</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  静态方法引用</span></span><br><span class="line"><span class="comment">         *  如果函数式接口的实现恰好是通过调用一个静态方法来实现，那么就可以使用静态方法引用</span></span><br><span class="line"><span class="comment">         *  类名::staticMethod</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier1</span> <span class="operator">=</span> () -&gt; Person.study();</span><br><span class="line">        System.out.println(supplier1.get());</span><br><span class="line">        <span class="type">Supplier</span> <span class="variable">supplier2</span> <span class="operator">=</span> Person::study;</span><br><span class="line">        System.out.println(supplier2.get());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *实例方法引用</span></span><br><span class="line"><span class="comment">         *如果函数式接口的实现恰好可以通过调用一个实例的实例方法来实现，那么就可以使用实例方法引用</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Function&lt;String,String&gt; function1 = str -&gt; <span class="keyword">new</span> <span class="title class_">Change</span>().change(str);</span><br><span class="line">        System.out.println(function1.apply(<span class="string">&quot;test1&quot;</span>));</span><br><span class="line">        Function&lt;String,String&gt; function2 = <span class="keyword">new</span> <span class="title class_">Change</span>()::change;</span><br><span class="line">        System.out.println(function2.apply(<span class="string">&quot;test2&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 构造器引用</span></span><br><span class="line"><span class="comment">         * 比如在jpa中findById查找后，返回Optional,调用orElseThrow(自定义异常::new)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Supplier&lt;Person&gt; s1 = () -&gt; <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        s1.get();</span><br><span class="line">        Supplier&lt;Person&gt; s2 = Person::<span class="keyword">new</span>;</span><br><span class="line">        s2.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testQuote();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">study</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Change</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">change</span><span class="params">(String str)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str.toUpperCase();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="stream"><a href="#stream" class="headerlink" title="stream"></a>stream</h3><p>stream是用来处理数组和集合的API,Stream分为源source，多个中间操作，一个终止操作</p><ol><li><p>源source可以是数组，集合，Stream.generate,Stream.iterate或者其它API进行创建</p></li><li><p>中间操作可以是零个或者多个，每一个中间操作会生成新的流。</p></li><li><p>流只有在遇到终止操作，它的流才开始遍历</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createStream</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  利用数组创建stream</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String[] arr =&#123;<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>&#125;;</span><br><span class="line">        Stream&lt;String&gt; stream1 = Stream.of(arr);</span><br><span class="line">        stream1.forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  利用集合创建stream</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; stringList = Arrays.asList(<span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>);</span><br><span class="line">        Stream&lt;String&gt; stream2 = stringList.stream();</span><br><span class="line">        stream2.forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  filter</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>).stream()</span><br><span class="line">                .filter(x -&gt; x%<span class="number">2</span>==<span class="number">0</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * distinct</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>).stream()</span><br><span class="line">                .distinct().forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * sorted</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">9</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">6</span>).stream()</span><br><span class="line">                .sorted().forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="string">&quot;13&quot;</span>,<span class="string">&quot;12&quot;</span>).stream()</span><br><span class="line">                .map(Integer::valueOf).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * mapToInt sum</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.asList(<span class="number">16</span>, <span class="number">17</span>).stream()</span><br><span class="line">                .mapToInt(x -&gt; x).sum();</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * limit</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Arrays.asList(<span class="number">20</span>,<span class="number">23</span>,<span class="number">99</span>,<span class="number">88</span>).stream()</span><br><span class="line">                .limit(<span class="number">3</span>).forEach(System.out::println);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * max,min</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> Arrays.asList(<span class="number">10</span>, <span class="number">14</span>, <span class="number">12</span>).stream()</span><br><span class="line">                .max((a, b) -&gt; a - b).get();</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  从1-50里面的所有偶数找出来你，放到一个list里面</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">List&lt;Integer&gt; list = Stream.iterate(<span class="number">1</span>, x -&gt; x + <span class="number">1</span>).limit(<span class="number">50</span>)</span><br><span class="line">                .filter(x -&gt; x%<span class="number">2</span> == <span class="number">0</span>).collect(Collectors.toList());</span><br><span class="line">    System.out.println(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        createStream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="综合应用实战篇"><a href="#综合应用实战篇" class="headerlink" title="综合应用实战篇"></a>综合应用实战篇</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> chenghao</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/9/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LambdaStreamDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  实战1  获取url后面的参数</span></span><br><span class="line"><span class="comment">         *  index.action?username=chenghao&amp;userId=1&amp;type=20&amp;token=adfded&amp;age=18</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String str=<span class="string">&quot;username=chenghao&amp;userId=1&amp;type=20&amp;token=adfded&amp;age=18&quot;</span>;</span><br><span class="line">        Map&lt;String, String&gt; urlMap = Stream.of(str.split(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">        .map(x -&gt; x.split(<span class="string">&quot;=&quot;</span>))</span><br><span class="line">        .collect(Collectors.toMap(s -&gt; s[<span class="number">0</span>], s -&gt; s[<span class="number">1</span>]));</span><br><span class="line">        System.out.println(urlMap);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         *  实战2 只将集合中id返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;Book&gt; books = Book.books();</span><br><span class="line">        List&lt;Integer&gt; collect = books.stream()</span><br><span class="line">                .map(Book::getId).collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战3 将书的类型去重后返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List&lt;String&gt; collect1 = Book.books().stream()</span><br><span class="line">                .map(Book::getType).distinct().collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect1);</span><br><span class="line">        </span><br><span class="line">        Set&lt;String&gt; collect2 = Book.books().stream()</span><br><span class="line">                .map(Book::getType).collect(Collectors.toSet());</span><br><span class="line">        System.out.println(collect2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战4 将书的价格大于60，按发版日期降序传给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Book.books().stream().filter(book -&gt; book.getPrice()&gt;<span class="number">60</span>)</span><br><span class="line">                .sorted(Comparator.comparing(Book::getPublishDate).reversed())</span><br><span class="line">                .forEach(System.out::print);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战5 转map 将book 转换为对应id 的map</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;Integer, Book&gt; map = Book.books().stream()</span><br><span class="line">                .collect(Collectors.toMap(Book::getId, book -&gt; book));</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战6 最大小  将book最贵的返回给前端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Optional&lt;Book&gt; collect3 = Book.books().stream()</span><br><span class="line">              .collect(Collectors.maxBy(Comparator.comparing(Book::getPrice)));</span><br><span class="line">        System.out.println(collect3);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 实战7 按类型分组后，取每组价格最高端</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, Optional&lt;Book&gt;&gt; collect4 = Book.books().stream()</span><br><span class="line">        .collect(Collectors.groupingBy(Book::getType, </span><br><span class="line">           Collectors.maxBy(Comparator.comparing(Book::getPrice))));</span><br><span class="line">        System.out.println(collect4);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java高效</title>
      <link href="/2022/12/21/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/12/21/Java%E7%BC%96%E7%A0%81%E6%8A%80%E5%B7%A7%E4%B9%8B%E9%AB%98%E6%95%88%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="Java编码技巧之高效代码"><a href="#Java编码技巧之高效代码" class="headerlink" title="Java编码技巧之高效代码"></a>Java编码技巧之高效代码</h1><h5 id="1-成员变量无需更改的时候，尽量定义位静态的"><a href="#1-成员变量无需更改的时候，尽量定义位静态的" class="headerlink" title="1 成员变量无需更改的时候，尽量定义位静态的"></a>1 成员变量无需更改的时候，尽量定义位静态的</h5><p>  无论一个类实例化多少对象，它的静态变量只有一份拷贝</p><h5 id="反列："><a href="#反列：" class="headerlink" title="反列："></a>反列：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例："><a href="#正例：" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpConnection</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">TIMEOUT</span> <span class="operator">=</span> <span class="number">5L</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="代码实战"><a href="#代码实战" class="headerlink" title="代码实战"></a>代码实战</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Static</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> count=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//private int count=0;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">Static() &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">add();  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">Static</span> <span class="variable">static1</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Static</span>();</span><br><span class="line">System.out.println(<span class="string">&quot;start:&quot;</span>+static1.getCount());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">static1=<span class="keyword">new</span> <span class="title class_">Static</span>();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">&quot;end:&quot;</span>+static1.getCount());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">控制台输出：</span><br><span class="line">    start:<span class="number">1</span></span><br><span class="line">    end:<span class="number">11</span></span><br><span class="line">如果不使用静态变量</span><br><span class="line">    start:<span class="number">1</span></span><br><span class="line">    end:<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h5 id="2-如果变量的初值会被覆盖，就没有必要给变量赋初值"><a href="#2-如果变量的初值会被覆盖，就没有必要给变量赋初值" class="headerlink" title="2 如果变量的初值会被覆盖，就没有必要给变量赋初值"></a>2 如果变量的初值会被覆盖，就没有必要给变量赋初值</h5><h5 id="反例："><a href="#反例：" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-1"><a href="#正例：-1" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList;</span><br><span class="line"><span class="keyword">if</span> (isAll) &#123;</span><br><span class="line">    userList = userDAO.queryAll();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    userList = userDAO.queryActive();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="3-尽量使用函数内的基本类型临时变量"><a href="#3-尽量使用函数内的基本类型临时变量" class="headerlink" title="3 尽量使用函数内的基本类型临时变量"></a>3 尽量使用函数内的基本类型临时变量</h5><p>在函数中，基本类型的的参数和变量都保存在栈中,访问速度快 引用类型的参数和临时变量引用都保存在栈中，而实际内容在堆中存储，访问较慢,在类中，任何类型的成员变量都保存在堆中，访问慢</p><h5 id="反例：-1"><a href="#反例：-1" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="type">double</span>[] values)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value : values) &#123;</span><br><span class="line">            result += value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-2"><a href="#正例：-2" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Accumulator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAll</span><span class="params">(<span class="meta">@NonNull</span> <span class="type">double</span>[] values)</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0.0D</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">double</span> value : values) &#123;</span><br><span class="line">            sum += value;</span><br><span class="line">        &#125;</span><br><span class="line">        result += sum;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="4-尽量不使用反射赋值对象"><a href="#4-尽量不使用反射赋值对象" class="headerlink" title="4 尽量不使用反射赋值对象"></a>4 尽量不使用反射赋值对象</h5><p> 用反射赋值对象，主要优点是节省了代码量，主要缺点却是性能有所下降 （BeanUtils.copyProperties）</p><h5 id="反例：-2"><a href="#反例：-2" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(userDO, userVO);</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-3"><a href="#正例：-3" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="5-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断"><a href="#5-尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断" class="headerlink" title="5 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断"></a>5 尽量使用基本数据类型作为方法参数类型，避免不必要的装箱和拆箱和空指针判断</h5><h5 id="反例：-3"><a href="#反例：-3" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(Double value1, Double value2)</span> &#123;</span><br><span class="line">    <span class="type">double</span> <span class="variable">double1</span> <span class="operator">=</span> Objects.isNull(value1) ? <span class="number">0.0D</span> : value1;</span><br><span class="line">    <span class="type">double</span> <span class="variable">double2</span> <span class="operator">=</span> Objects.isNull(value2) ? <span class="number">0.0D</span> : value2;</span><br><span class="line">    <span class="keyword">return</span> double1 + double2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-4"><a href="#正例：-4" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> value1, <span class="type">double</span> value2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value1 + value2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="6-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断"><a href="#6-尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断" class="headerlink" title="6 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断"></a>6 尽量使用基本数据类型作为方法返回值类型，避免不必要的装箱和拆箱和空指针判断</h5><p>在JDK类库的方法中，很多方法返回值都采用了基本数据类型，首先是为了避免不必要的装箱和拆箱，其次是为了避免返回值的空指针判断。比如：Collection.isEmpty()和Map.size()。 </p><h5 id="反例：-4"><a href="#反例：-4" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isValid</span><span class="params">(UserDO user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"><span class="type">UserDO</span> <span class="variable">user</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isValid</span> <span class="operator">=</span> isValid(user);</span><br><span class="line"><span class="keyword">if</span> (Objects.nonNull(isValid) &amp;&amp; isValid.booleanValue()) &#123; </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-5"><a href="#正例：-5" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(UserDO user)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Objects.isNull(user)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(user.getIsValid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用代码</span></span><br><span class="line"><span class="type">UserDO</span> <span class="variable">user</span> <span class="operator">=</span> ...;</span><br><span class="line"><span class="keyword">if</span> (isValid(user)) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="7-尽量减少方法的重复调用"><a href="#7-尽量减少方法的重复调用" class="headerlink" title="7 尽量减少方法的重复调用"></a>7 尽量减少方法的重复调用</h5><h5 id="反例：-5"><a href="#反例：-5" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userList.size(); i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-6"><a href="#正例：-6" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userList = ...;</span><br><span class="line"><span class="type">int</span> <span class="variable">userLength</span> <span class="operator">=</span> userList.size();</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; userLength; i++) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="8-尽量不要在循环体外定义对象引用"><a href="#8-尽量不要在循环体外定义对象引用" class="headerlink" title="8 尽量不要在循环体外定义对象引用"></a>8 尽量不要在循环体外定义对象引用</h5><p>在老版JDK里，建议“尽量不要在循环体内定义对象引用”，但是在新版JDK已经做了优化。通过对编译后的字节码分析，对象引用定义在循环体外和循环体内没有本质的区别，运行效率基本上一样。反而，根据“ 局部变量作用域最小化 ”，变量定义在循环体内更科学更便于维护，避免了大对象延长生命周期导致延缓回收问题 。 </p><h5 id="反例：-6"><a href="#反例：-6" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">UserVO userVO;</span><br><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    userVO = <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-7"><a href="#正例：-7" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">List&lt;UserDO&gt; userDOList = ...;</span><br><span class="line">List&lt;UserVO&gt; userVOList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(userDOList.size());</span><br><span class="line"><span class="keyword">for</span> (UserDO userDO : userDOList) &#123;</span><br><span class="line">    <span class="type">UserVO</span> <span class="variable">userVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserVO</span>();</span><br><span class="line">    userVO.setId(userDO.getId());</span><br><span class="line">    ...</span><br><span class="line">    userVOList.add(userVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h5 id="9-尽量不要使用正则表达式匹配"><a href="#9-尽量不要使用正则表达式匹配" class="headerlink" title="9 尽量不要使用正则表达式匹配"></a>9 尽量不要使用正则表达式匹配</h5><p> 正则表达式匹配效率较低，尽量使用字符串匹配操作。 </p><h5 id="反例：-7"><a href="#反例：-7" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> source.replaceAll(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">Stringp[] targets = source.split(<span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="正例：-8"><a href="#正例：-8" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">source</span> <span class="operator">=</span> <span class="string">&quot;a::1,b::2,c::3,d::4&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">target</span> <span class="operator">=</span> source.replace(<span class="string">&quot;::&quot;</span>, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">Stringp[] targets = StringUtils.split(source, <span class="string">&quot;::&quot;</span>);</span><br></pre></td></tr></table></figure><hr><h5 id="10-尽量重复使用同一缓冲区"><a href="#10-尽量重复使用同一缓冲区" class="headerlink" title="10 尽量重复使用同一缓冲区"></a>10 尽量重复使用同一缓冲区</h5><p> 针对缓冲区，Java虚拟机需要花时间生成对象，还要花时间进行垃圾回收处理。所以，尽量重复利用缓冲区。 </p><h5 id="反例：-8"><a href="#反例：-8" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder1.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder1.toString());</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder2.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(builder2.toString());</span><br></pre></td></tr></table></figure><h5 id="正例：-9"><a href="#正例：-9" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">StringBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>(<span class="number">128</span>);</span><br><span class="line">builder.append(<span class="string">&quot;update t_user set name = &#x27;&quot;</span>).append(userName).append(<span class="string">&quot;&#x27; where id = &quot;</span>).append(userId);</span><br><span class="line">statement.executeUpdate(builder.toString());</span><br><span class="line">builder.setLength(<span class="number">0</span>);</span><br><span class="line">builder.append(<span class="string">&quot;select id, name from t_user where id = &quot;</span>).append(userId);</span><br><span class="line"><span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(builder.toString());</span><br></pre></td></tr></table></figure><hr><h5 id="11-在多线程中，尽量使用线程安全类"><a href="#11-在多线程中，尽量使用线程安全类" class="headerlink" title="11 在多线程中，尽量使用线程安全类"></a>11 在多线程中，尽量使用线程安全类</h5><p> 使用线程安全类，比自己实现的同步代码更简洁更高效。 </p><h5 id="反例：-9"><a href="#反例：-9" class="headerlink" title="反例："></a>反例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        counter++;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="正例：-10"><a href="#正例：-10" class="headerlink" title="正例："></a>正例：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">access</span><span class="params">(Long userId)</span> &#123;</span><br><span class="line">    counter.incrementAndGet();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码干货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本操作</title>
      <link href="/2022/12/21/docker/"/>
      <url>/2022/12/21/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="DOCKER"><a href="#DOCKER" class="headerlink" title="DOCKER"></a>DOCKER</h1><p>linux环境安装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载最新的官方docker的yum源</span><br><span class="line">curl https:<span class="comment">//download.docker.com/linux/centos/docker-ce.repo -o  /etc/yum.repos.d/docker.repo</span></span><br><span class="line">可以通过yum list ｜ grep docker 查看一下最新的版本</span><br><span class="line">yum install -y docker-ce</span><br></pre></td></tr></table></figure><p>1    给镜像打标签 docker tag  镜像   xxx </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker tag ubuntu ubuntu_test</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                 latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            latest              2ca708c1c9cc        3 weeks ago   64.2MB</span><br></pre></td></tr></table></figure><p> 如果想修改TAG，则使用docker tag 镜像 xxx:xxx 的形式即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker tag ubuntu ubuntu_test:test</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY             TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">ubuntu                 latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            latest              2ca708c1c9cc        3 weeks ago         64.2MB</span><br><span class="line">ubuntu_test            test                2ca708c1c9cc        3 weeks ago         64.2MB</span><br></pre></td></tr></table></figure><hr><p>2     打包容器成为一个功能增加的新的镜像 docker commit -m “描述” -a “操作人员”   CONTAINER ID   新的镜像名 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker commit -m &quot;centos install net-tools&quot; -a &quot;chenghao&quot; d56b7d590195  my_centos</span><br><span class="line">sha256:9b8543bb78c7e8ef3a0b00b553bb5995ac39e99995be3a5c94968c2cf79649a8</span><br></pre></td></tr></table></figure><hr><p>3     导出镜像   docker  save   -o  xx.tar   镜像 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker save -o my_centos_test.tar centos_with_net_tools</span><br><span class="line">ls</span><br><span class="line">my_centos_test.tar</span><br></pre></td></tr></table></figure><hr><p>4     导入镜像 docker load –input tar  名称 或者 docker load &lt; xx.tar</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load &lt; my_centos_test.tar</span><br><span class="line">1cf8055af1f2: Loading layer [==================================================&gt;]  73.73MB/73.73MB</span><br><span class="line">Loaded image: centos_with_net_tools:latest</span><br></pre></td></tr></table></figure><hr><p>5     删除容器 docker rm container_id (如果容器正在运行，加上-f) </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker rm -f my_centos</span><br><span class="line">my_centos</span><br><span class="line">docker  export  container_id  &gt; file.tar  // 导出容器，可以迁移到其他机器上，需要导入</span><br><span class="line">cat file.tar |docker import - aming_test   //这样会生成aming_test的镜像</span><br></pre></td></tr></table></figure><hr><p>6    <strong>镜像私有仓库</strong></p><ol><li>下载registry 镜像，我们可以用它来创建本地的docker私有仓库 docker pull registry （registry 服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull registry</span><br></pre></td></tr></table></figure><ol start="2"><li> 启动容器，映射端口到宿主机  （registry 服务器）</li></ol><p>   -p会把容器的端口映射到宿主机上，:左边为宿主机监听端口，:右边为容器监听端口 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 5000:5000 --name my_registry registry</span><br><span class="line">5a49aaf4b84a3eafc7dc77b1c6c69db816aab1b43d91b4176126378398189ed8</span><br></pre></td></tr></table></figure><ol start="3"><li> 检查容器是否映射成功  （registry 服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[]&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li> 标记一下tag，必须要带有私有仓库的ip:port（另一个服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker tag centos_with_net_tools 192.168.31.232:5000/centos</span><br><span class="line">chenghaodeMacBook-Pro:~ chenghao$ docker images</span><br><span class="line">REPOSITORY          TAG      IMAGE ID              CREATED         SIZE</span><br><span class="line">192.168.31.232:5000/centos   latest    9b8543bb78c7        3 hours ago         276MB</span><br></pre></td></tr></table></figure><ol start="5"><li>  推送镜像到私有仓库 （另一个服务器）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.31.232:5000/centos</span><br><span class="line">The push refers to repository [192.168.31.232:5000/centos]</span><br><span class="line">Get https://192.168.31.232:5000/v2/: http: server gave HTTP response to HTTPS client</span><br></pre></td></tr></table></figure><p>warn：发现推送镜像失败，需要添加仓库路径后重新推送,需要https的方法才能上传，我们可以修改下daemon.json来解决, vim /etc/docker/daemon.json （docker重启后，注意重新启动registry容器）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [ &quot;https://registry.docker-cn.com&quot;],</span><br><span class="line">  &quot;insecure-registries&quot;: [ &quot;192.168.31.232:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新在尝试推送一次</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker push 192.168.31.232:5000/centos</span><br><span class="line">The push refers to repository [192.168.31.232:5000/centos]</span><br><span class="line">1cf8055af1f2: Pushed</span><br><span class="line">877b494a9f30: Pushed</span><br><span class="line">latest: digest: sha256:33d629cba22f24ad8f43ada6b72f2b1905a3365a3341fcbd6cb7469834658d49 </span><br></pre></td></tr></table></figure><ol start="6"><li>重新检查registry 服务器，可以发现镜像已经推送成功，这样在其它主机配置相同到仓库地址就可以拉取到镜像了 </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl 127.0.0.1:5000/v2/_catalog</span><br><span class="line">&#123;&quot;repositories&quot;:[&quot;centos&quot;]&#125;</span><br></pre></td></tr></table></figure><hr><p>7    <strong>数据管理</strong></p><ol><li>挂载本地的目录到容器里 -v 用来指定挂载目录 :前面的/data/为宿主机本地目录，:后面的/data/为容器里的目录，会在容器中自动创建 </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name my_centos -v /usr/local/data/:/usr/local/data centos bash</span><br><span class="line">7261513862ef9a43b59725cef76b7c10df53fe002dc8dcff701b53926ba60426</span><br></pre></td></tr></table></figure><ol start="2"><li> 在宿主机新建目录，查看容器目录是否能够同步 </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chenghaodeMacBook-Pro:data chenghao$mkdir test</span><br><span class="line">进入容器</span><br><span class="line">[root@7261513862ef data]# ll</span><br><span class="line">drwxr-xr-x 2 root root 64 Oct 13 15:06 test</span><br></pre></td></tr></table></figure><ol start="3"><li> 挂载数据卷 新建一个容器，挂载到上面创建的my_centos容器 (注意–volumes-from 中间不能空格) </li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --volumes-from my_centos --name=centos_test centos bash</span><br><span class="line">ad40fc78083e0e5e8a84eb20597b03145de7d6fe66e238cdad8d52dae4e9c85d</span><br></pre></td></tr></table></figure><ol start="4"><li>以后如果我们需要多个容器之间相互共享数据，类似于linux里面的NFS，我们就可以搭建一个专门的数据卷    容器，然后其他容器直接挂载该数据卷。 </li></ol><hr><p>8    <strong>DOCKERFILE构建镜像</strong></p><ol><li><p>FROM  //指定基于哪个基础镜像</p><p> FROM centos </p></li><li><p>MAINTAINER  //指定作者信息 </p><p> MAINTAINER  chenghao  </p></li><li><p>RUN  //镜像操作指令 </p><p> 格式为 RUN 或者 RUN [“executable”, “param1”, “param2”]，比如<br> RUN  yum install  httpd<br> RUN [“/bin/bash”, “-c”, “echo hello”] </p></li><li><p>CMD //用来指定容器启动时用到的命令，只能有一条<br>格式为：CMD [“executable”, “param1”, “param2”]或 CMD command param1 param2 或 CMD [“param1”, “param2”]<br>CMD [“/bin/bash”, “/usr/local/nginx/sbin/nginx”, “-c”, “/usr/local/nginx/conf/nginx.conf”] </p></li><li><p>EXPOSE //映射出去的端口<br>EXPOSE 22 80 8443 </p></li><li><p>ENV  //为后续的RUN指令提供一个环境变量<br>ENV PATH /usr/local/mysql/bin:$PATH</p></li><li><p>COPY // 复制文件。 其基本格式：<br>格式1：COPY &lt;源路径&gt;…&lt;目标路径&gt;<br>格式2：COPY [“&lt;源路径1&gt;”,…..”&lt;目标路径&gt;“] </p></li><li><p>ADD // 更高级的复制文件，在COPY的基础上增加了一些功能，如果复制的是压缩包的话，会直接解压，而不需要在使用RUN解压. 将本地的一个文件或目录拷贝到容器的某个目录里。 其中src为Dockerfile所在目录的相对路径，它也可以是一个url，会直接去下载，不需要通过RUN更加的方便。</p></li><li><p>VOLUME //创建一个可以从本地主机或其他容器挂载的挂载点<br>格式  VOLUME [“/data”] </p></li><li><p>ENTRYPOINT // 容器启动时要执行的命令，它和CMD很像，也是只有一条生效，如果写多个只有最后一条有效。和CMD不同是：CMD 是可以被 docker run 指令覆盖的，而ENTRYPOINT不能覆盖</p></li><li><p>USER //指定运行容器的用户<br>格式 USER chenghao </p></li><li><p>WORKDIR //为后续的RUN、CMD或者ENTRYPOINT指定工作目录<br>格式 WORKDIR  /path/to/workdir </p></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#来源于哪个镜像</span></span><br><span class="line">FROM centos</span><br><span class="line"><span class="comment"># 作者信息</span></span><br><span class="line">MAINTAINER chenghao javachenghao@<span class="number">163</span>.com</span><br><span class="line"><span class="comment"># 安装相关的依赖</span></span><br><span class="line">RUN yum install -y pcre-devel wget net-tools gcc zlib zlib-devel make openssl-devel</span><br><span class="line"><span class="comment"># 下载nginx</span></span><br><span class="line">ADD http:<span class="comment">//nginx.org/download/nginx-1.18.0.tar.gz .</span></span><br><span class="line"><span class="comment"># 解压nginx</span></span><br><span class="line">RUN tar zxvf nginx-<span class="number">1.8</span>.<span class="number">0</span>.tar.gz</span><br><span class="line"><span class="comment"># 创建文件夹</span></span><br><span class="line">RUN mkdir -p /usr/local/nginx</span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">RUN cd nginx-<span class="number">1.8</span>.<span class="number">0</span> &amp;&amp; ./configure --prefix=/usr/local/nginx &amp;&amp; make &amp;&amp; make install</span><br><span class="line"><span class="comment"># 打开端口</span></span><br><span class="line">EXPOSE <span class="number">80</span></span><br><span class="line"><span class="comment"># 容器启动后执行命令 tail 保证一直运行</span></span><br><span class="line">ENTRYPOINT /usr/local/nginx/sbin/nginx &amp;&amp; tail -f /etc/passwd</span><br></pre></td></tr></table></figure><p>创建镜像：<br>docker build -t centos_nginx  . </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Step 8/9 : EXPOSE 80</span><br><span class="line"> ---&gt; Running in d309fbba6478</span><br><span class="line">Removing intermediate container d309fbba6478</span><br><span class="line"> ---&gt; e069703b2053</span><br><span class="line">Step 9/9 : ENTRYPOINT /usr/local/nginx/sbin/nginx &amp;&amp; tail -f /etc/passwd</span><br><span class="line"> ---&gt; Running in ece236553641</span><br><span class="line">Removing intermediate container ece236553641</span><br><span class="line"> ---&gt; 483bcf6d8150</span><br><span class="line">Successfully built 483bcf6d8150</span><br><span class="line">Successfully tagged nginx:latest</span><br></pre></td></tr></table></figure><p> 启动容器，检验状态 ,发现启动成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 8080:80 483bcf6d8150 bash</span><br><span class="line">871971b3df433772b452e20059f919f0a8c5a2c5d22ac3981fd33e71016405b0</span><br><span class="line">chenghaodeMacBook-Pro:Documents chenghao$ docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS            NAMES</span><br><span class="line">871971b3df43        483bcf6d8150        &quot;/bin/sh -c &#x27;/usr/lo…&quot;   4 seconds ago       Up 3 seconds       0.0.0.0:8080-&gt;80/tcp     serene_bartik</span><br><span class="line">chenghaodeMacBook-Pro:Documents chenghao$ curl 127.0.0.1:8080</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;Welcome to nginx!&lt;/title&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        width: 35em;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">        font-family: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Welcome to nginx!&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;If you see this page, the nginx web server is successfully installed and</span><br><span class="line">working. Further configuration is required.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;For online documentation and support please refer to</span><br><span class="line">&lt;a href=&quot;http://nginx.org/&quot;&gt;nginx.org&lt;/a&gt;.&lt;br/&gt;</span><br><span class="line">Commercial support is available at</span><br><span class="line">&lt;a href=&quot;http://nginx.com/&quot;&gt;nginx.com&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;em&gt;Thank you for using nginx.&lt;/em&gt;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="docker-logs-f-容器-可以用来查看容器为啥启动不成功"><a href="#docker-logs-f-容器-可以用来查看容器为啥启动不成功" class="headerlink" title="docker logs -f  容器   可以用来查看容器为啥启动不成功"></a>docker logs -f  容器   可以用来查看容器为啥启动不成功</h2>]]></content>
      
      
      <categories>
          
          <category> 容器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
